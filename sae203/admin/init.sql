-- phpMyAdmin SQL Dump
-- version 4.9.6
-- https://www.phpmyadmin.net/
--
-- Hôte : lz56lu.myd.infomaniak.com
-- Généré le :  ven. 09 mai 2025 à 02:19
-- Version du serveur :  10.6.21-MariaDB-deb11-log
-- Version de PHP :  7.4.33

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Base de données :  `lz56lu_devQuest`
--
CREATE DATABASE IF NOT EXISTS `lz56lu_devQuest` DEFAULT CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci;
USE `lz56lu_devQuest`;

-- --------------------------------------------------------

--
-- Structure de la table `sae203_challenge`
--

CREATE TABLE `sae203_challenge` (
  `id` int(11) NOT NULL,
  `step_id` int(11) NOT NULL,
  `title` varchar(255) NOT NULL,
  `description` varchar(255) NOT NULL,
  `xp_reward` int(11) NOT NULL,
  `type` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- --------------------------------------------------------

--
-- Structure de la table `sae203_course`
--

CREATE TABLE `sae203_course` (
  `id` int(11) NOT NULL,
  `title` varchar(255) NOT NULL,
  `description` varchar(255) NOT NULL,
  `slug` varchar(255) NOT NULL,
  `level` varchar(255) NOT NULL,
  `category` varchar(255) NOT NULL,
  `xp_reward` int(11) NOT NULL,
  `banner` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Déchargement des données de la table `sae203_course`
--

INSERT INTO `sae203_course` (`id`, `title`, `description`, `slug`, `level`, `category`, `xp_reward`, `banner`) VALUES
(11, 'GOLF WANG', 'GOLDEN RUBBERS IN THESE DENIM POCKETS', 'tyler', 'Débutant', 'Parcours Annexe', 666, 'basic3.jpg'),
(16, 'Introduction au Web', 'Comprendre les bases du fonctionnement du Web et s\'équiper pour coder.', 'introduction-web', 'Débutant', 'Parcours Complet', 200, 'basic2.jpg'),
(29, 'Apprendre le HTML', 'Apprendre à créer la structure de base d’une page web en utilisant HTML', 'introduction-HTML', 'Débutant', 'Parcours Complet', 500, 'basic4.jpg');

-- --------------------------------------------------------

--
-- Structure de la table `sae203_defi`
--

CREATE TABLE `sae203_defi` (
  `id` int(11) NOT NULL,
  `title` varchar(255) NOT NULL,
  `description` varchar(510) NOT NULL,
  `type` varchar(255) NOT NULL,
  `xp_reward` int(11) NOT NULL,
  `deadline` datetime DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `banner` varchar(255) NOT NULL,
  `slug` varchar(255) NOT NULL,
  `level` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Déchargement des données de la table `sae203_defi`
--

INSERT INTO `sae203_defi` (`id`, `title`, `description`, `type`, `xp_reward`, `deadline`, `created_at`, `banner`, `slug`, `level`) VALUES
(1, 'Test', 'Ceci est un test de defi', 'Constant', 100, NULL, '2025-05-07 09:47:40', 'basic.jpg', 'test-defi', 'Débutant');

-- --------------------------------------------------------

--
-- Structure de la table `sae203_lesson`
--

CREATE TABLE `sae203_lesson` (
  `id` int(11) NOT NULL,
  `step_id` int(11) NOT NULL,
  `title` varchar(255) NOT NULL,
  `content` longtext NOT NULL,
  `order_index` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Déchargement des données de la table `sae203_lesson`
--

INSERT INTO `sae203_lesson` (`id`, `step_id`, `title`, `content`, `order_index`) VALUES
(22, 10, 'St. Chroma', '\'\'\'\r\n[Intro: Tyler, The Creator]\r\nYou are the light\r\nIt\'s not on you, it\'s in you\r\nDon\'t you ever in your motherfucking life dim your light for nobody\r\nChromakopia, Chromakopia\r\nChromakopia (Ah), Chromakopia (Woo, woo, woo, woo)\r\nChromakopia (Ah, ah, ah, woo), Chromakopia (Ah, ah, ah, woo)\r\nChromakopia (Ah), Chromakopia (Woo, woo)\r\nChromako—\r\n\r\n[Verse 1: Tyler, The Creator]\r\nCalm down, sit still, that\'s one mil\' for each wheel\r\nTop down, big deal, how the fuck he do that?\r\nWhat the fuck I look like? Get the fuck up out him way\r\nHawthorne is where him from, another planet where him stay\r\nFifteen cash for that new fort, I had guap since nineteen\r\nI popped out like chi-ching, I think I\'m a goddamn fiend\r\nReally ballin\' in this bitch, I\'m the hardest in this bitch\r\nGive a fuck about no bark, I\'m chasin\' dogs up in this bitch\r\nEl Segundo felt like colosseum\r\nP said I could do it too, and boy, did I believe him\r\nI built a path of freedom \'cause them words that he said\r\nGive a fuck about tradition, stop impressin\' the dead, ah\r\nI\'m gon\' make it out, promise I\'m gon\' make it out\r\nMama, I\'m gon\' make it out, pussy, I\'m gon\' make it out\r\nI ain\'t never had a doubt inside me\r\nAnd if I ever told you that I did, I\'m fuckin\' lyin\', can you feel the light?\r\nYou might also like\r\nROSÉ & Bruno Mars - APT. (Romanized)\r\nGenius Romanizations\r\nThick Of It\r\nKSI\r\nTake Your Mask Off\r\nTyler, The Creator\r\n[Chorus: Daniel Caesar & Tyler, The Creator]\r\nCan you feel the light inside?\r\nCan you feel that fire? (Can you feel it, can you feel it? Oh)\r\nOh, fire (Can you feel it, can you feel it? Ooh, oh), fire\r\nCan you feel the light (Inside), inside?\r\nCan you feel that fire? (Can you feel it?)\r\nOh, fire (Fire), fire (Ooh)\r\n\r\n[Break: Tyler, The Creator]\r\nWoo, yeah, Chromakopia, yeah, yeah, Chromakopia\r\nWoo, yeah, Chromakopia, yeah, yeah, Chromakopia\r\n\r\n[Verse 2: Tyler, The Creator]\r\nOkay, I is just a box with the light of thunder in me (Woo)\r\nGratitude sit under the hubris that\'s on my sleeve\r\nMama said I\'m mhm, special, I was mhm\r\nBlow shit up at home back in Chromakopia, mhm\r\nI don\'t (I don\'t), like the (Like the), way that this is lookin\' (No)\r\nMirror got me (Got me), thinkin\' about my bookend (I\'m done)\r\nI just need this time to myself to figure me out-out\r\nDo I keep the light on or do I gracefully bow out?\r\nIt\'s in me, bro\r\n\r\n[Interlude: Daniel Caesar]\r\nOh, oh, oh (Don\'t you ever stop bein\' who you are and dimmin\' your light for none of these motherfuckers out here)\r\n[Chorus: Daniel Caesar]\r\nCan you feel the light inside?\r\nCan you feel that fire? (Oh)\r\nOh, fire (Oh), fire\r\nCan you feel the light inside?\r\nCan you feel that fire? (Oh)\r\n\'\'\'', 1),
(23, 10, 'WARF TALK', '\'\'\'\r\n[Intro: DJ Drama]\r\n(Call Me If You Get Lost)\r\n\r\n[Verse 1: Tyler, The Creator]\r\nIf God was here with us today\r\nI think I know what He would say (Some shit like)\r\n\"You\'re so beautiful, and your lips look nice\"\r\nUh (Not the- not the one on your face)\r\n\r\n[Refrain: Tyler, The Creator]\r\nI got a new boat, you should come with\r\nI got a section for your luggage\r\nBring some fiction and a nightlight\r\nRecord player and your top five\r\nWhere we goin\'? We should get lost\r\nNo more questions, let the wharf talk, uh\r\n(So there\'s a lot goin\' on, make you comfortable)\r\n\r\n[Chorus: Tyler, The Creator]\r\nI want you to come get lost with me\r\nAsk you one more time before I tread too deep (I want you)\r\nSo can you make up your mind?\r\nA wave\'s gonna come, wave\'s gonna come\r\nSo can you make up your mind?\r\nA wave\'s gonna come (I want)\r\nYou might also like\r\nCHACHA\r\nTyler, The Creator\r\nLike Him\r\nTyler, The Creator\r\nNoid\r\nTyler, The Creator\r\n[Verse 2: Tyler, The Creator]\r\nUnlike my friends, don\'t think I\'ll fall in love again\r\nBut I\'ll take a chance, seclusion isn\'t in my plans\r\nPack my shit up, time I headed back out \'cause my shit\'s up\r\nSpend it all in one out, wanna split some\r\nSome here with you right now\r\n(Whatever you want)\r\nIf you got cold feet, it\'s warm by the water\r\nYou can turn your page around, let me be the author\r\nDon\'t leave your destiny by the harbor\r\n(Come on, it don\'t gotta be like that)\r\n\r\n[Chorus: Tyler, The Creator & DJ Drama]\r\nI want you (Say yes), to come get lost with me\r\nAsk you one more time (Say yes), before I tread too deep (I want you)\r\nSo can you make up your mind?\r\nA wave\'s gonna come, wave\'s gonna come\r\nSo can you make up your mind? (Flacko)\r\nA wave\'s gonna come (I want)\r\n\r\n[Verse 3: A$AP Rocky & DJ Drama]\r\nThem bitches say I\'m too conceited, they see the way I treat her\r\nBe my señorita, put a ring up on her finger\r\nTake her out the climate, somewhere to put her feet up\r\nNeck Valentinin\', rubies, diamonds, uh\r\nBillionaire yacht party, climate was hot\r\nBaby, if you seasick, we could stop on the dock\r\nYeah, lobster and calamari, caviar, um\r\nLots of luggage, private boarding, carry on, um (Dance with us)\r\n[Refrain: Tyler, The Creator & A$AP Rocky]\r\nI got a new boat, you should come with (You should come with)\r\nI got a section for your luggage (Luggage)\r\nBring some fiction and a nightlight (Nightlight)\r\nRecord player and your top five (Top five)\r\nWhere we goin\'? We should get lost (Get lost)\r\nNo more questions, let the wharf talk (Wharf talk)\r\nWharf talk, uh-huh\r\n\r\n[Outro: Tyler, The Creator]\r\nI want you (I want you)\r\nTo come get lost with me (Make up your mind)\r\nAsk you one more time (Ask you one more time)\r\nBefore I go (Oh-oh-oh, oh-oh-oh, oh)\r\nBefore I go (Oh-oh-oh, oh-oh-oh, oh)\r\nBefore I go (Oh-oh-oh, oh-oh-oh, oh, oh, oh, oh-oh-oh, when you gonna come?)\r\n\'\'\'', 2),
(24, 10, 'She', '\'\'\'\r\n[Verse 1: Frank Ocean]\r\nGolden rubbers in these denim pockets (Denim pockets)\r\nOn my waist, there\'s a black Glock (Black Glock)\r\nNew girl moved on the block (On the block)\r\nShe been plottin\' on my brown cock (Brown cock)\r\nLast night, I slept over hers (Over hers)\r\nDuring sex, I overheard (I overheard)\r\nA sword sliced the air, I pulled out the na-na\r\nRolled off the bed, then shot back, pow-pow\r\nBlood on the sheets, probably spillin\' from my gash\r\nLooked out the glass, seen him sprintin\' on the grass\r\nA real ninja, with the blade and the mask\r\nHad them gold ninja stars, and red Supreme nunchuks\r\nNow, she tryna patch me up, but\r\nGirl, I was just tryna get a nut bust\r\nIf that\'s your ex, you should probably own a pistol\r\nBut I\'m guessin\' it\'s wiser to exit with dude\r\n\r\n[Chorus: Frank Ocean & Tyler, The Creator]\r\nThe blinds wide open so he can (Ooh)\r\nSee you in the dark when you\'re sleepin\' (Ooh)\r\nNaked body, fresh out the shower\r\nAnd you touch yourself after hours (Ah, ah)\r\nAin\'t no man allowed in your bedroom (Ah, ah)\r\nYou\'re sleeping alone in bed (Ooh, ooh)\r\nBut check your window (Swag)\r\nHe\'s at your window\r\nYou might also like\r\nThought I Was Dead\r\nTyler, The Creator\r\nNoid\r\nTyler, The Creator\r\nSticky\r\nTyler, The Creator\r\n[Verse 2: Tyler, The Creator]\r\nNight light hits off, turnin\' kisses to bites\r\nI\'m a down to Earth nigga with intentions that\'s right\r\nYou\'ll be down in Earth quicker if you diss me tonight\r\nBut I\'ll be the happiest if you decide to kick it tonight\r\nWe can chill and I can act like I don\'t wanna fuck\r\nYou can tell me all your problems like I really give one (Nope)\r\nBut I give two for us \'cause you\'re the one that I want\r\nDon\'t wanna seem like a punk pussy that simps over punk pussy\r\nSee, when I\'m with my friends, I just put on a front\r\nBut in the back of my top, I\'m writing songs about we\r\nWe, as including I, and yourself, making three\r\nLittle ones, the drums are hitting pretty hard if you ask me\r\nYou\'re a pretty broad in the top three\r\nOf things that I\'ve been waiting to come, so\r\nMeet me by the lake around 10 and skinny dippin\' and then\r\nWe can begin the pretend game, I wanna be Finn from Adventure Time, yeah\r\n\r\n[Chorus: Frank Ocean & Tyler, The Creator]\r\nThe blinds wide open so he can (Ooh; Yeah)\r\nSee you in the dark when you\'re sleepin\' (Ooh)\r\nNaked body, fresh out the shower\r\nAnd you touch yourself after hours (Ah, ah)\r\nAin\'t no man allowed in your bedroom (Ah, ah)\r\nYou\'re sleeping alone in bed (Ooh, ooh)\r\nBut check your window\r\nHe\'s at your window\r\n[Verse 3: Tyler, The Creator & Frank Ocean]\r\nOne, two; you\'re the girl that I want\r\nThree, four, five, six, seven; shit\r\nEight is the bullets if you say no after all this\r\nAnd I just couldn\'t take it, you\'re so motherfuckin\' gorgeous\r\nGorgeous, baby, you\'re gorgeous (Ooh)\r\nI just wanna drag your lifeless body to the forest (Ooh-ooh)\r\nAnd fornicate with it\r\nBut that\'s because I\'m in love with you, cunt\r\n\r\n[Bridge: Tyler, The Creator]\r\nI just wanna talk, and conversate\r\n\'Cause I usually just stalk you and masturbate\r\nAnd I finally got the courage to ask you on a date\r\nSo just say yes, let the future fall into place (Cunt)\r\nI just wanna talk and conversate\r\n\'Cause I usually just stalk you and masturbate\r\nAnd I finally got the courage to ask you on a date\r\nSo just say yes, let the future fall into place, cunt\r\n\r\n[Chorus: Frank Ocean]\r\nThe blinds wide open so he can (Ooh)\r\nSee you in the dark when you\'re sleepin\' (Ooh)\r\nNaked body, fresh out the shower\r\nAnd you touch yourself after hours (Ah, ah)\r\nAin\'t no man allowed in your bedroom (Ah, ah)\r\nYou\'re sleeping alone in bed (Ooh, ooh)\r\nBut check your window\r\nHe\'s at your window\r\nThe blinds wide open so he can (Ooh)\r\nSee you in the dark when you\'re sleepin\' (Ooh)\r\nNaked body, fresh out the shower\r\nAnd you touch yourself after hours (Ah, ah)\r\nAin\'t no man allowed in your bedroom (Ah, ah)\r\nYou\'re sleeping alone in bed (Ooh, ooh)\r\nHe\'s at your window\r\n[Outro: Tyler, The Creator]\r\nOne, two; you\'re the girl that I want\r\nThree, four, five, six, seven; shit\r\nEight is the bullets if you say no after all this\r\nAnd I just couldn\'t take it, you\'re so motherfuckin\' gorgeous\r\nGorgeous, gorgeous, gorgeous, gorgeous\r\n\'\'\'', 3),
(25, 11, 'Night', '\'\'\'\r\n[Verse 1]\r\n\'Round your city, \'round the clock\r\nEverybody needs you\r\nNo, you can\'t make everybody equal\r\nAlthough you got beaucoup family\r\nYou don\'t even got nobody bein\' honest with you\r\nBreathe \'til I evaporated\r\nMy whole body see-through\r\nTransportation, handmade (G)\r\nAnd I know it better than most people\r\nI don\'t trust \'em anyways\r\nYou can\'t break the law with them\r\nGet some gushy, have a calm night\r\nShooters killin\' left and right\r\nWorkin\' through your worst night\r\nIf I get my money right\r\nYou know I won\'t need you\r\nAnd I tell you (Bitch)\r\nI hope the sack is full up\r\nI\'m fuckin\', no, I\'m fucked up\r\nSpend it when I get that\r\nI ain\'t tryna keep you\r\nCan\'t keep up a conversation\r\nCan\'t nobody reach you\r\nWhy your eyes well up? (Breathe)\r\nDid you call me from a séance?\r\nYou are from my past life\r\nHope you\'re doin\' well, bruh (Breathe)\r\nI been out here head first\r\nAlways like the head first\r\nSignal comin\' in and out\r\nHope you\'re doin\' well, bruh\r\nEverybody needs you\r\nEverybody needs you\r\nOoh, \'nani-\'nani\r\nThis feel like a Quaalude\r\nNo sleep in my body\r\nAin\'t no bitch in my body (Ah)\r\nYou might also like\r\nSticky\r\nTyler, The Creator\r\nDarling, I\r\nTyler, The Creator\r\nJudge Judy\r\nTyler, The Creator\r\n[Pre-Chorus]\r\nNew beginnings, ahh\r\nNew beginnings, wake up, akh\r\nThe sun\'s goin\' down\r\nTime to start your day, bruh\r\nCan\'t keep bein\' laid off\r\nKnow you need the money if you gon\' survive\r\nEvery night shit, every day shit\r\n\r\n[Chorus]\r\nDroppin\' baby off at home before my night shift\r\nYou know I can\'t hear none of that \"spend the night\" shit\r\nThat kumbaya shit\r\nWanna see nirvana, but don\'t wanna die yet\r\nWanna feel that \'na-\'na, though, could you come by?\r\nFuck wit\' me after my shift\r\nKnow them boys wanna see me broke down and shit\r\nBummed out and shit, stressed out and shit\r\nThat\'s every day shit\r\nShut the fuck up, I don\'t want your conversation\r\nRollin\' marijuana, that\'s a cheap vacation\r\nMy every day shit, every night shit\r\nEvery day shit (Every night shit, night shit, night shit, night shit)\r\n\r\n[Bridge]\r\nAll my night, been ready for you all my night\r\nBeen waitin\' on you all my night\r\nI\'ll buzz you in, just let me know when you\'re outside\r\nAll my night, you been missin\' all my night\r\nStill got some good nights memorized\r\nAnd the look back\'s gettin\' me right\r\n[Part II]\r\n\r\n[Verse 2]\r\nEvery night fucks every day up\r\nEvery day patches the night up (Night, come on)\r\nOn God, you should match it, it\'s that KO (That KO, God)\r\nNo white lighters \'til I fuck my twenty-eighth up (Fire)\r\n1998, my family had that Acura (Fire)\r\nOh, the Legend (Fire)\r\nKept at least six discs in the changer (Yeah-yeah)\r\nBack when Boswell and Percy had it active (Massive)\r\nCouple bishops in the city buildin\' mansions (Massive)\r\nAll the reverends (Massive, massive, ooh)\r\nPreachin\' self-made millionaire status (Yeah, yeah)\r\nWhen we could only eat at Shoney\'s on occasion (Yeah, yeah)\r\nAfter \'Trina hit, I had to transfer campus (Yeah, yeah)\r\nYour apartment out in Houston\'s where I waited (Yeah, yeah, ooh)\r\nStayin\' with you when I didn\'t have a address (Ooh)\r\nFuckin\' on you when I didn\'t own a mattress (Fuckin\')\r\nWorkin\' on a way to make it outta Texas\r\nEvery night (Right now, right now, right now)\r\n\r\n[Chorus]\r\nDroppin\' baby off at home before my night shift, yeah\r\nYou know I can\'t hear none of that \"spend the night\" shit\r\nThat kumbaya shit\r\nWant to see nirvana, but don\'t wanna die yet\r\nWanna feel that \'na-\'na, though, could you come by?\r\nFuck wit\' me after my shift\r\nKnow them boys wanna see me broke down\r\nBummed out, stressed out\r\nThat\'s just every day shit\r\nShut the fuck up, I don\'t want your conversation\r\nRollin\' marijuana, that\'s a cheap vacation (Day shit)\r\nEvery day shit, every night shit (Every night shit, every day shit)\r\nEvery day shit, every day shit (Every night shit, every night shit)\r\nEvery day shit, every day shit (Every night shit, every night shit)\r\nEvery night shit\r\n\'\'\'', 1),
(26, 11, '911 - Mr. Lonely', '\'\'\'\n[Intro: Tyler, The Creator]\n(Call me, call me, call me) Uh\n(Call me, call me, call me) Uh\n(Call me, call me, call me) Uh\n(Call me, call me, call me)\n(Call me) How you doin\'?\n(Call me) My name is Lonely, nice to meet you\nHere\'s my number\nYou can reach me, woo!\n\n[Chorus: Tyler, The Creator]\n(Call me)\n911, call me some time\n(You should call me)\n911, call me some time\n911 (You should call me, oh)\n911 (Call me)\n\n[Verse 1: Tyler, The Creator]\nAw, yeah, yeah, yeah, yeah\nMy thirst levels are infinity and beyond\nSippin\' on that lemonade, I need a Beyoncé\nCan\'t see straight, these shades are Céline Dion\nSucks you can\'t gas me up, shout out to Elon\nMusk, yeah, I got a sold-out show\nCrowd wild out but don\'t matter \'cause you not front row\nI\'ve been lookin\' for a keeper, listen to the speaker\nIf you fit description, hit me on my beeper\nAt that 911\n\n[Bridge: Steve Lacy, Anna of the North & Tyler, The Creator]\nCall me some time (Ring, ring, ring)\nPlease bang my line, you know I\'ll answer (Click)\nCall me some time (Ring, ring, ring)\nPlease bang my line\n\n[Chorus: Tyler, The Creator & Anna of the North]\nCall me\n911, call me some time\nYou should call me\n911, call me some time\n911 (You should call me, oh)\n911, (You should call me)\n\n[Verse 2: Frank Ocean]\nChirp, chirp\nChirp, chirp\nWoke up in the \'burbs, \'burbs, with the birds, birds\nWhere you used to come and get me with the swerve, swerve\nThese days, you gotta find time\nEven the nightline\nWork line\nDial nine\n\n[Verse 3: Tyler, The Creator]\nFive car garage\nFull tank of the gas\nBut that don\'t mean nothin\', nothin\'\nNothin\', nothin\', without you shotgun in the passenger\nI\'m the loneliest man alive\nBut I keep on dancing to throw \'em off\nI\'m gon\' run out of moves \'cause I can\'t groove to the blues\nIf you know any DJs, tell \'em to call me at 911...\n[Part II: Mr. Lonely]\n\n[Intro: A$AP Rocky, ScHoolboy Q, Lionel & Tyler, The Creator]\nI can\'t even lie, I\'ve been lonely as fuck\nOld lonely-ass nigga\nI can\'t even lie, I\'ve been lonely as fuck\nFor real, you need to go somewhere, like, get some bitches or something\nI can\'t even lie, I\'ve been lonely as fuck\nOld weird ass nigga\nI can\'t even lie, I\'ve been\nLonely, lonely, lonely, lonely\n\n[Verse: Tyler, The Creator]\nThey say the loudest in the room is weak\nThat\'s what they assume, but I disagree\nI say the loudest in the room\nIs prolly the loneliest one in the room (That\'s me)\nAttention seeker, public speaker\nOh my God, that boy there is so fuckin\' lonely (Woo)\nWritin\' songs about these people\nWho do not exist, he\'s such a fuckin\' phony (Woo)\nOne thing I know is that I wanna\nWin so bad, but I\'m not Chicago\nMy heart is low, it\'s real low, it\'s so low\nYou can\'t lift me up, I\'m like Gallardo\nFrom the start, it\'s been real dark\nIt\'s been so dark, I guess that you could call me charbroiled, huh (Hahaha)\nI\'m playin\' like Hasbro\nI\'m really Saari, call me Arto\nCrashed the McLaren, bought me a Tesla\nI know you sick of me talkin\' \'bout cars (Skrrt)\nBut what the fuck else do you want from me?\nThat is the only thing keepin\' me company\nPurchase some things until I\'m annoyed\nThese items is fillin\' the void (Void)\nBeen fillin\' it for so long\nI don\'t even know if it\'s shit I enjoy (Ohh, woo)\nCurrent battle as an adult\nMy partner is a shadow\nI need love, do you got some I could borrow?\nFuck it, I could find some tomorrow\nBut that never comes (Nah)\nLike a vasectomy, what have I done? (Ohh)\nI got the talent, the face and the funds\nFound myself long ago but I haven\'t found someone (Who)\nMirror, mirror on the wall (Who)\nThe loneliest of them all (Me)\nCupid actin\' stupid\nDo you got another number I could call?\nNever had a pet\n(I never had a pet)\nThere\'s more fish in the sea\nBut I never had a goldfish to begin with\nI never had a dog\nSo I\'ve never been good with bitches\n\'Cause I never threw a ball, fetch\nI never had a pet, that\'s where it stems from, I bet\nTreat me like direct deposit (-Posit)\nCheck in on me sometime (Okay)\nAsk me how I\'m really doin\'\nSo I never have to press that 911\n[Outro: Jasper]\nOhh!\nOhh, shit!\nFuck!\nOhh!\nShit!\nOhh!\nDamn! Damn!\n\'\'\'', 2),
(40, 17, 'Qu’est-ce qu’un site web ?', '## Introduction\r\n\r\nAvant de se lancer dans l\'apprentissage du code, il est essentiel de comprendre **ce qu\'est un site web** et comment il fonctionne. Vous en visitez probablement des dizaines chaque jour, sans forcément connaître ce qui se passe « dans les coulisses ». Cette leçon vous permettra de poser les fondations pour la suite de votre apprentissage en développement web.\r\n\r\n---\r\n\r\n## Le client et le serveur : une relation indispensable\r\n\r\nUn site web fonctionne grâce à l’échange de données entre **deux entités principales** : le **client** et le **serveur**.\r\n\r\n- **Le client**, c’est vous ! Ou plus précisément, c’est votre **navigateur web** (comme Google Chrome, Firefox, Safari…), qui permet d’afficher les pages des sites web. Le client demande des pages.\r\n- **Le serveur**, c’est un ordinateur distant qui **héberge** les fichiers du site. Lorsqu’un client envoie une requête (par exemple en cliquant sur un lien), le serveur traite cette requête et répond avec les fichiers nécessaires.\r\n\r\nOn peut voir cette relation comme un restaurant :\r\n- Le **client** est le client du restaurant.\r\n- Le **serveur** est le personnel en cuisine.\r\n- Le **navigateur** est comme le menu et le plateau de service.\r\n- Et la **page web** est le plat servi !\r\n\r\n---\r\n\r\n## Qu’est-ce qu’un navigateur ?\r\n\r\nUn **navigateur web** (ou browser) est une application qui permet d’afficher les sites web. Les navigateurs interprètent le **code HTML, CSS et JavaScript** envoyé par les serveurs et le traduisent en pages visuelles compréhensibles par les humains.\r\n\r\nLes navigateurs les plus connus sont :\r\n- Google Chrome\r\n- Mozilla Firefox\r\n- Safari\r\n- Microsoft Edge\r\n\r\nTous ces navigateurs sont conçus pour **comprendre les langages du web**. Ils ne peuvent pas lire tous les types de fichiers, mais savent très bien afficher du HTML, appliquer du CSS et exécuter du JavaScript.\r\n\r\n---\r\n\r\n## Qu’est-ce que l’hébergement ?\r\n\r\nUn site web est composé de fichiers (comme `index.html`, des images, des scripts, etc.). Pour que ces fichiers soient accessibles par tout le monde via Internet, il faut les **héberger** sur un **serveur**.\r\n\r\nL’**hébergement web** consiste donc à louer un espace sur un serveur (souvent un ordinateur très puissant connecté 24/7 à Internet). C’est là que seront stockés vos fichiers.\r\n\r\nIl existe plusieurs solutions d’hébergement :\r\n- Des services gratuits comme GitHub Pages (parfait pour les débuts)\r\n- Des hébergeurs payants comme OVH, Hostinger, ou PlanetHoster\r\n- Des serveurs cloud comme ceux proposés par AWS, Google Cloud ou Azure\r\n\r\nQuand quelqu’un tape l’adresse de votre site, son navigateur envoie une requête au serveur où votre site est hébergé, et celui-ci lui renvoie les fichiers demandés.\r\n\r\n---\r\n\r\n## À quoi ressemble un site web, côté technique ?\r\n\r\nUn site web n’est rien d’autre qu’un ensemble de fichiers :\r\n- Le fichier **HTML** définit la structure du contenu.\r\n- Le fichier **CSS** définit le style et la mise en page.\r\n- Le fichier **JavaScript** définit l’interactivité (comme les clics, les animations, etc.).\r\n- Il peut aussi contenir des **images, polices, icônes**, etc.\r\n\r\nCes fichiers sont stockés dans un **dossier organisé** et accessibles via une **URL** (comme `https://monsite.com`).\r\n\r\nQuand vous développez un site, vous créez ces fichiers sur votre ordinateur, puis vous les transférez sur un serveur pour qu’ils soient visibles en ligne.\r\n\r\n---\r\n\r\n## Résumé\r\n\r\nUn site web, ce n’est pas magique : c’est un ensemble de fichiers qui sont stockés sur un serveur. Lorsqu’un utilisateur entre une adresse dans son navigateur, le navigateur contacte ce serveur, récupère les fichiers nécessaires (HTML, CSS, etc.), puis les affiche à l’écran.\r\n\r\n- Le **client** (navigateur) demande la page.\r\n- Le **serveur** envoie les fichiers.\r\n- Le **navigateur** interprète le code et affiche la page.\r\n\r\nCes trois éléments — client, serveur, navigateur — sont les piliers du fonctionnement du web.\r\n\r\nDans la prochaine leçon, nous allons voir **comment se passe précisément le chargement d’une page**, étape par étape, afin de mieux comprendre ce dialogue entre navigateur et serveur.\r\n\r\n---\r\n\r\n## À retenir\r\n\r\n- Un site web est composé de **fichiers HTML, CSS, JS**, etc.\r\n- Le **serveur** héberge ces fichiers et les envoie au **navigateur** sur demande.\r\n- Le **navigateur** affiche les pages web en interprétant le code.\r\n- L’**hébergement** est ce qui rend votre site accessible sur Internet.', 1),
(41, 17, 'Comment fonctionne le chargement d\'une page ?', '## Introduction\r\n\r\nQuand vous tapez une adresse dans votre navigateur (comme `www.exemple.com`), la page du site s\'affiche souvent en quelques secondes. Mais que se passe-t-il en coulisses pour que cela fonctionne ? Cette leçon va vous expliquer **chaque étape** du **chargement d\'une page web**, de la requête à l\'affichage.\r\n\r\nComprendre ce processus est essentiel pour un développeur, car c’est en maîtrisant le fonctionnement du web que vous saurez mieux coder, optimiser, et résoudre les erreurs plus tard.\r\n\r\n---\r\n\r\n## Étape 1 : La requête du navigateur\r\n\r\nTout commence lorsque vous entrez une **URL** dans votre navigateur.\r\n\r\nPar exemple : [chotinl.24.gremmi.fr](chotinl.24.gremmi.fr/sae203)\r\n\r\nLe navigateur commence par analyser cette adresse :\r\n- **https** : le protocole utilisé pour la communication (nous en reparlerons plus tard).\r\n- **www.openclassrooms.com** : le nom de domaine, qui doit être transformé en une adresse IP.\r\n- Le navigateur prépare alors une **requête HTTP**, un message demandant au serveur d’envoyer le contenu de la page.\r\n\r\nC’est un peu comme envoyer une lettre avec une demande bien précise au serveur.\r\n\r\n---\r\n\r\n## Étape 2 : Résolution DNS\r\n\r\nAvant de contacter le serveur, le navigateur doit savoir **où** le trouver. Pour cela, il passe par un service appelé **DNS (Domain Name System)**.\r\n\r\nLe DNS fait correspondre un nom de domaine (`openclassrooms.com`) à une adresse IP réelle (comme `145.239.37.162`), qui identifie le serveur sur Internet. C’est exactement comme utiliser un **annuaire téléphonique** : on cherche un nom, et on obtient le numéro à appeler.\r\n\r\nUne fois que le navigateur connaît l\'adresse IP du serveur, il peut établir une connexion avec lui.\r\n\r\n---\r\n\r\n## Étape 3 : Connexion au serveur\r\n\r\nLe navigateur établit ensuite une **connexion avec le serveur** distant. Cela se fait via le protocole **HTTP** ou **HTTPS** (qui est la version sécurisée). Cette connexion permet d’envoyer la requête préparée à l’étape précédente.\r\n\r\nLe navigateur demande alors :\r\n> Bonjour serveur ! Je voudrais la page d’accueil (`/`) du site `openclassrooms.com`.\r\n\r\nLe serveur, qui reconnaît cette demande, s’active pour répondre.\r\n\r\n---\r\n\r\n## Étape 4 : Réponse du serveur\r\n\r\nLe **serveur web** reçoit la requête, traite les informations nécessaires (souvent à l’aide de langages serveur comme PHP, Node.js, etc.), puis renvoie une **réponse HTTP** au navigateur.\r\n\r\nCette réponse contient souvent plusieurs fichiers :\r\n- Le fichier **HTML principal**\r\n- Les fichiers **CSS** pour le style\r\n- Les fichiers **JavaScript** pour les interactions\r\n- Des **images, polices**, ou **icônes**\r\n\r\nTous ces fichiers sont envoyés en plusieurs allers-retours entre le navigateur et le serveur.\r\n\r\n---\r\n\r\n## Étape 5 : Interprétation des fichiers\r\n\r\nUne fois que le navigateur a reçu tous les fichiers nécessaires, il commence à **interpréter** le code :\r\n- Il lit d\'abord le **fichier HTML**, qui décrit la structure de la page.\r\n- Ensuite, il applique le **CSS** pour mettre en forme cette structure.\r\n- Enfin, il exécute les **scripts JavaScript** pour rendre la page interactive.\r\n\r\nC’est à ce moment que vous voyez réellement le contenu s’afficher à l’écran.\r\n\r\n---\r\n\r\n## Étape 6 : Rendu final\r\n\r\nQuand tout est prêt, la page s’affiche dans le navigateur. Ce que vous voyez est le **résultat du travail combiné** du serveur (qui a envoyé les fichiers) et du navigateur (qui les a interprétés).\r\n\r\nEt tout cela se produit en quelques **millisecondes** à **quelques secondes**, selon la qualité de votre connexion, la taille des fichiers, ou les performances du serveur.\r\n\r\n---\r\n\r\n## Schéma récapitulatif\r\n\r\nVoici un résumé visuel du processus (vous pourrez le transformer en infographie) :\r\n\r\n1. L\'utilisateur tape une URL dans son navigateur.\r\n2. Le navigateur consulte le DNS pour obtenir l’adresse IP du serveur.\r\n3. Il envoie une requête HTTP au serveur.\r\n4. Le serveur génère une réponse (HTML, CSS, JS, etc.).\r\n5. Le navigateur télécharge ces fichiers.\r\n6. Il interprète le code et affiche la page à l’écran.\r\n\r\n---\r\n\r\n## Conclusion\r\n\r\nLe chargement d’une page web repose sur **une série d’étapes très organisées**, bien que souvent invisibles pour l’utilisateur :\r\n- Une **demande** est envoyée par le navigateur.\r\n- Le **serveur** prépare une réponse.\r\n- Le navigateur **interprète** les fichiers reçus.\r\n- Et la page s’**affiche** !\r\n\r\nEn tant que futur développeur, il est crucial de comprendre cette mécanique, car elle vous aidera à résoudre des problèmes (comme des fichiers qui ne chargent pas, ou des erreurs de serveur), et à optimiser vos pages web.\r\n\r\nDans la prochaine leçon, nous verrons la différence entre **frontend et backend**, c’est-à-dire entre ce qui s’affiche et ce qui fonctionne « en coulisses ».\r\n\r\n---\r\n\r\n## À retenir\r\n\r\n- Une **page web** est chargée à travers une série d’étapes techniques : DNS, requête, réponse, affichage.\r\n- Le **navigateur** fait le lien entre l’utilisateur et les fichiers envoyés par le **serveur**.\r\n- Plusieurs fichiers sont impliqués : HTML, CSS, JS, images...\r\n- Tout ce processus repose sur les **protocoles web (HTTP/HTTPS)** et sur l’infrastructure **client/serveur**.', 2),
(42, 17, 'Frontend vs Backend', '## Introduction\r\n\r\nSi vous débutez dans le développement web, vous entendrez très souvent deux mots : **frontend** et **backend**. Ces deux parties sont fondamentales pour comprendre comment un site web est construit, comment il fonctionne, et où interviennent vos lignes de code.\r\n\r\nDans cette leçon, nous allons vous aider à bien **distinguer** le frontend et le backend grâce à des analogies, des exemples concrets et une infographie textuelle que vous pourrez facilement mémoriser.\r\n\r\n---\r\n\r\n## Le frontend : ce que l\'utilisateur voit\r\n\r\nLe **frontend**, aussi appelé *côté client*, représente **tout ce que voit l’utilisateur dans son navigateur** : le design, les boutons, les menus, les couleurs, les images, etc.\r\n\r\nOn peut dire que le frontend, c’est **l’interface utilisateur**.\r\n\r\n### Langages du frontend :\r\n- **HTML** : structure de la page (titres, paragraphes, formulaires…)\r\n- **CSS** : apparence visuelle (couleurs, disposition, polices…)\r\n- **JavaScript** : interactions (animations, clics, formulaires dynamiques…)\r\n\r\n> Le frontend est exécuté **par le navigateur**, sur l’ordinateur ou le smartphone de l’utilisateur. Il est donc **visible** et **interactif**.\r\n\r\n---\r\n\r\n## Le backend : ce que l’utilisateur ne voit pas\r\n\r\nLe **backend**, aussi appelé *côté serveur*, correspond à **tout ce qui se passe en coulisses**, derrière l’écran. Il gère les données, la logique métier, l’authentification, les bases de données, etc.\r\n\r\nOn peut dire que le backend, c’est **le cerveau du site web**.\r\n\r\n### Langages du backend (exemples) :\r\n- **PHP**\r\n- **Python**\r\n- **Ruby**\r\n- **Java**\r\n- **Node.js**\r\n- **C#**\r\n\r\nLe backend est **exécuté sur le serveur** distant, celui qui héberge le site. Il ne s’affiche jamais directement dans le navigateur. Il produit souvent une réponse (HTML, JSON, etc.) que le navigateur affichera.\r\n\r\n---\r\n\r\n## Analogie : restaurant\r\n\r\nImaginez un site web comme un restaurant :\r\n\r\n- Le **client** (utilisateur) lit un **menu** (l’interface frontend).\r\n- Il **commande un plat** (interaction frontend).\r\n- Le **serveur en cuisine** (backend) prépare la commande.\r\n- Le **plat arrive à table** (réponse du serveur envoyée au navigateur).\r\n\r\nDans cette métaphore :\r\n- Le **frontend** correspond à la carte, la décoration, le serveur en salle.\r\n- Le **backend** correspond à la cuisine, les recettes, les stocks.\r\n\r\n---\r\n\r\n## Exemple concret : formulaire de connexion\r\n\r\nPrenons une page de connexion avec un champ e-mail, un champ mot de passe, et un bouton \"Se connecter\".\r\n\r\n- Le **frontend** affiche le formulaire : couleurs, textes, position des champs.\r\n- Le **JavaScript frontend** vérifie si les champs ne sont pas vides.\r\n- Une fois validé, les données sont envoyées au **backend**.\r\n- Le **backend** vérifie dans la base de données si l’utilisateur existe et si le mot de passe est correct.\r\n- Si tout est bon, le serveur renvoie une réponse positive (ex. : redirection vers le tableau de bord).\r\n\r\n\r\n---\r\n\r\n## Résumé\r\n\r\n- Le **frontend** s’occupe de l’affichage et de l’interaction avec l’utilisateur. C’est ce que vous voyez.\r\n- Le **backend** s’occupe du traitement des données et de la logique métier. C’est ce que vous **ne voyez pas**, mais qui est indispensable.\r\n- Les deux sont **complémentaires** : l’un ne va pas sans l’autre !\r\n\r\n---\r\n\r\n## À retenir\r\n\r\n- **Frontend = visible** (HTML, CSS, JS), exécuté sur l’ordinateur de l’utilisateur.\r\n- **Backend = invisible** (PHP, Python, etc.), exécuté sur le serveur.\r\n- Tout site dynamique a besoin des **deux parties**.\r\n- La communication entre frontend et backend se fait grâce aux **requêtes HTTP**.\r\n\r\nDans le prochain exercice, vous allez compléter un **schéma du flux client-serveur** pour bien ancrer cette distinction dans votre esprit. Let’s go !', 3),
(43, 17, 'Exercice – Compléter le schéma client/serveur', '## Objectif de l’exercice\n\nCet exercice a pour but de **visualiser et comprendre comment un site web est chargé**, en représentant le **flux d\'information entre le client (navigateur) et le serveur**.\n\nVous allez compléter un schéma textuel en replaçant les éléments suivants au bon endroit :\n\n- Navigateur\n- Fichier HTML\n- Fichier CSS\n- Serveur\n- Requête HTTP\n- Réponse HTTP\n\n---\n\n## Instructions\n\nComplétez le schéma ci-dessous en **remplaçant les zones entre crochets** `[ ]` par les **termes appropriés**.\n\n---\n\n## Aide\n\nVous pouvez vous référer au schéma présenté dans la leçon 1.1.3 si besoin. Voici un rappel rapide du flux :\n\n1. Le navigateur demande une page au serveur via une **requête HTTP**.\n2. Le serveur génère la page et envoie une **réponse HTTP**, souvent sous forme de **fichier HTML**, accompagné d’un fichier CSS (et parfois JavaScript).\n3. Le navigateur affiche le tout à l’écran.\n\n---\n\n## Solution (à ne consulter qu’après avoir essayé !)\n\n---\n\n## Variante facultative\n\nSi vous êtes à l’aise, reproduisez ce schéma **à la main sur papier ou dans un fichier de dessin** (Canva, Figma, Paint…) en ajoutant aussi le JavaScript ou un appel à une base de données côté serveur. Cela vous aidera à mieux fixer les rôles de chacun.\n\n---\n\n## À retenir\n\n- Le **navigateur** est le point de départ : il envoie une requête HTTP.\n- Le **serveur** traite la requête et envoie une réponse.\n- Le navigateur **interprète les fichiers HTML/CSS/JS** pour afficher la page.\n', 4),
(44, 18, 'Les outils : VSCode, navigateur, extensions', '## Introduction\n\nLorsque vous commencez à apprendre le développement web, il est important de vous équiper des bons outils pour rendre votre travail plus rapide, plus efficace et plus agréable. Dans cette leçon, nous allons explorer les principaux outils utilisés par les développeurs web : l\'éditeur de code, les navigateurs web, et les extensions utiles.\n\nCes outils vous permettront de coder plus facilement, de tester vos pages, et d’optimiser votre flux de travail.\n\n---\n\n## L\'éditeur de code : Visual Studio Code\n\n### Pourquoi un éditeur de code est-il essentiel ?\n\nUn éditeur de code est **l’outil principal** pour écrire, modifier et organiser votre code. C\'est un peu comme une feuille de papier numérique où vous allez taper vos lignes de code HTML, CSS et JavaScript.\n\nL’éditeur de code que nous recommandons pour ce parcours est **Visual Studio Code (VSCode)**. C’est un éditeur gratuit, léger, mais puissant, qui est largement utilisé par les développeurs web. Voici pourquoi :\n\n1. **Syntaxe colorée** : VSCode met en évidence les différentes parties du code (balises HTML, propriétés CSS, fonctions JavaScript) avec des couleurs pour les différencier. Cela rend le code plus facile à lire.\n2. **Complétion automatique** : Lorsque vous tapez, VSCode propose automatiquement des suggestions, ce qui vous aide à coder plus rapidement et sans erreurs.\n3. **Extensions** : VSCode permet d’ajouter des extensions pour personnaliser l’éditeur en fonction de vos besoins. Par exemple, des extensions pour l’automatisation des tâches, la gestion de version avec Git, ou l’intégration avec des outils comme Prettier (pour formater le code).\n\n### Installation de VSCode\n\nPour commencer, vous devez télécharger **Visual Studio Code** sur le site officiel : [https://code.visualstudio.com/](https://code.visualstudio.com/).\n\nUne fois installé, vous pouvez commencer à l’utiliser en créant un dossier de projet et en ouvrant un fichier HTML, CSS ou JS.\n\n---\n\n## Le navigateur : Google Chrome\n\n### Pourquoi le navigateur est-il essentiel ?\n\nEn tant que développeur web, vous allez **constamment interagir avec un navigateur**. C’est là que vous allez voir le résultat de votre code en temps réel. Le navigateur prend votre code (HTML, CSS, JS) et l’interprète pour l\'afficher sous forme de page web.\n\nLe navigateur que nous recommandons pour ce parcours est **Google Chrome**. Bien sûr, vous pouvez utiliser d\'autres navigateurs comme Firefox ou Edge, mais Chrome reste un choix populaire parmi les développeurs web pour plusieurs raisons :\n\n1. **Outils de développement intégrés** : Google Chrome possède des **outils de développement puissants** (dev tools) qui vous permettent d’inspecter le code, de modifier en direct les éléments de la page, et de tester le comportement du site.\n2. **Performance et vitesse** : Chrome est connu pour sa rapidité et son efficacité, ce qui est essentiel lorsque vous travaillez avec des projets web complexes.\n3. **Extensions utiles** : Chrome propose une large gamme d\'extensions qui facilitent le développement, comme l\'extension **Live Server** qui permet de voir les modifications en direct sans recharger la page.\n\n### Outils de développement de Chrome\n\nVoici quelques outils très utiles que vous trouverez dans **les outils de développement** (accessible via F12 ou clic droit > \"Inspecter\") :\n\n- **Console** : Permet d\'afficher les erreurs JavaScript, d\'interagir avec le code via des commandes directes.\n- **Inspecteur** : Permet de voir et de modifier le code HTML et CSS de la page en temps réel.\n- **Émulation mobile** : Vous permet de tester comment votre site se comporte sur différents appareils (smartphones, tablettes, etc.).\n\n---\n\n## Les extensions utiles pour le développement\n\nLes extensions sont des outils supplémentaires qui s’ajoutent à votre éditeur de code ou votre navigateur pour améliorer votre expérience de développement.\n\n### Extensions pour VSCode\n\n1. **Prettier** : Cette extension permet de **formater automatiquement** votre code (HTML, CSS, JavaScript) pour le rendre plus lisible et homogène.\n2. **Live Server** : Permet d’ouvrir une page web en direct dans votre navigateur et de la mettre à jour en temps réel dès que vous modifiez votre code.\n3. **Emmet** : Une extension qui permet d’écrire du code HTML et CSS beaucoup plus rapidement grâce à des abréviations.\n\n### Extensions pour Google Chrome\n\n1. **LiveReload** : Cette extension fonctionne avec **Live Server** et permet de recharger automatiquement la page à chaque changement dans le code.\n2. **ColorZilla** : Outil pour **copier les couleurs** des éléments de la page et les utiliser dans votre propre code.\n3. **Lighthouse** : Un outil d’audit de performance, accessibilité et SEO pour analyser la qualité de votre site.\n\n---\n\n## Résumé\n\nDans cette leçon, vous avez découvert trois outils essentiels pour le développement web :\n\n1. **Visual Studio Code (VSCode)** : un éditeur de code puissant et personnalisable pour écrire votre code.\n2. **Google Chrome** : un navigateur avec des outils de développement qui vous aideront à tester et déboguer vos sites.\n3. **Extensions utiles** : des outils pour améliorer votre flux de travail et automatiser certaines tâches.\n\n---\n\n## À retenir\n\n- **VSCode** est l\'éditeur de code recommandé. Il permet d’écrire, de tester et de formater le code.\n- **Google Chrome** est le navigateur recommandé pour tester vos pages, avec des outils intégrés pour inspecter et déboguer.\n- **Les extensions** améliorent votre expérience de développement en vous offrant des fonctionnalités supplémentaires, comme la mise en forme automatique ou l’affichage en temps réel.\n\nDans la prochaine leçon, nous verrons **comment configurer et organiser un projet web** dans VSCode, afin de mieux structurer vos fichiers pour un développement efficace.', 1),
(45, 18, 'Installation et configuration de l’environnement local', '## Introduction\n\nAvant de pouvoir commencer à coder, vous devez configurer votre environnement de développement local. Cela signifie installer les outils nécessaires sur votre ordinateur pour pouvoir **écrire et tester votre code** en toute autonomie. Cette leçon vous guide à travers les étapes d\'installation et de configuration de votre espace de travail.\n\n---\n\n## Étape 1 : Installer un éditeur de code\n\nNous avons déjà parlé de **Visual Studio Code** (VSCode), qui est un éditeur de code léger, rapide et puissant. Il est essentiel de l’installer en premier, car c’est l’endroit où vous allez écrire votre code HTML, CSS et JavaScript.\n\n### Télécharger VSCode\n\n1. Allez sur [https://code.visualstudio.com/](https://code.visualstudio.com/).\n2. Cliquez sur le bouton **Télécharger pour Windows** (ou Mac/Linux si vous êtes sur ces systèmes).\n3. Une fois le fichier téléchargé, **ouvrez-le** et suivez les instructions pour l’installation.\n\nUne fois installé, vous pouvez ouvrir **VSCode** et commencer à l’utiliser pour écrire votre code.\n\n---\n\n## Étape 2 : Installer un serveur local (Live Server)\n\nPour voir vos pages web en direct dans le navigateur sans avoir besoin d’un serveur en ligne, il est pratique d\'installer une extension qui vous permet de **visualiser vos pages en temps réel**.\n\nNous allons utiliser l\'extension **Live Server** pour cela.\n\n### Installer Live Server dans VSCode\n\n1. Ouvrez **VSCode**.\n2. Dans le menu latéral gauche, cliquez sur l’icône des **extensions** (quatrième icône en bas).\n3. Dans la barre de recherche, tapez **Live Server**.\n4. Cliquez sur **Installer** sur l\'extension **Live Server** de Ritwick Dey.\n\n### Utiliser Live Server\n\n1. Ouvrez votre projet dans **VSCode** (par exemple, un fichier `index.html`).\n2. Clic droit sur votre fichier `index.html` et sélectionnez **\"Open with Live Server\"**.\n3. Votre navigateur s’ouvrira automatiquement et affichera la page en temps réel.\n4. Dès que vous modifiez votre code dans VSCode, **Live Server mettra à jour la page** dans le navigateur sans avoir besoin de la recharger manuellement.\n\n---\n\n## Étape 3 : Organiser votre dossier de projet\n\nUne fois l\'éditeur de code et le serveur local installés, vous pouvez organiser votre premier projet.\n\n### Créer un dossier de projet\n\n1. Créez un dossier **\"mon-premier-site\"** sur votre ordinateur.\n2. Ouvrez ce dossier dans **VSCode** en sélectionnant **\"Fichier > Ouvrir Dossier\"**.\n3. Dans ce dossier, créez un **fichier HTML** (`index.html`).\n\n### Structure d’un projet web\n\nUn projet web basique devrait être organisé ainsi :\n\n\'\'\'arborescence\nmon-premier-site/\n│\n├── index.html <-- fichier principal HTML\n├── style.css <-- fichier de styles CSS\n└── script.js <-- fichier JavaScript (si besoin)\n\'\'\'\n\nVous pouvez créer ces fichiers à partir de **VSCode** :\n- Faites **Clic droit > Nouveau fichier** et nommez-le `index.html`.\n- Créez également un fichier `style.css` et un fichier `script.js` dans le même dossier.\n\n---\n\n## Étape 4 : Tester votre projet\n\nMaintenant que tout est installé et configuré, testons votre projet.\n\n### Contenu du fichier `index.html`\n\nDans **VSCode**, ouvrez votre fichier `index.html` et ajoutez-y le code suivant :\n\n\'\'\'html\n<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Mon Premier Site</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <h1>Bienvenue sur mon premier site web !</h1>\n    <p>C\'est mon tout premier projet. Bravo à moi !</p>\n    <script src=\"script.js\"></script>\n</body>\n</html>\n\'\'\'\n\n### Contenu du fichier `style.css`\n\nDans **VSCode**, ouvrez votre fichier `style.css` et ajoutez-y le code suivant pour styliser la page :\n\n\'\'\'css\nbody {\n    font-family: Arial, sans-serif;\n    background-color: #f4f4f4;\n    color: #333;\n}\n\nh1 {\n    color: #ff6347;\n}\n\'\'\'\n\n### Contenu du fichier `script.js`\n\nDans **VSCode**, ouvrez votre fichier `script.js` et ajoutez-y ce simple script JavaScript :\n\n\'\'\'js\nconsole.log(\"Bienvenue sur mon premier site web !\");\n\'\'\'\n\n### Tester avec Live Server\n\n1. Enregistrez tous vos fichiers (`index.html`, `style.css`, `script.js`).\n2. Clic droit sur **index.html** dans VSCode et choisissez **\"Open with Live Server\"**.\n3. Votre page s’ouvrira dans le navigateur, affichant le texte et le style que vous avez définis.\n4. Si vous ouvrez la console du navigateur (F12), vous verrez le message `Bienvenue sur mon premier site web !` s\'afficher grâce à JavaScript.\n\n---\n\n## Résumé\n\nVous avez maintenant installé tous les outils nécessaires pour commencer à développer des sites web :\n\n1. **VSCode** : l’éditeur de code où vous écrivez vos fichiers HTML, CSS et JavaScript.\n2. **Live Server** : l\'extension qui permet de voir les changements en direct dans votre navigateur.\n3. **Structure de projet** : vous avez organisé votre projet web avec un dossier contenant les fichiers HTML, CSS, et JS.\n\n---\n\n## À retenir\n\n- **VSCode** est l\'éditeur de code utilisé pour créer et modifier votre site.\n- **Live Server** permet de voir les changements en direct dans votre navigateur.\n- Organisez toujours vos projets web dans des dossiers clairs, avec des fichiers bien nommés : `index.html`, `style.css`, `script.js`.\n\nDans la prochaine leçon, nous commencerons à créer une **page HTML simple**, en utilisant tout ce que vous avez appris jusqu’ici.\n', 2);
INSERT INTO `sae203_lesson` (`id`, `step_id`, `title`, `content`, `order_index`) VALUES
(46, 18, 'Structure d’un projet web (fichiers et arborescence)', '## Introduction\n\nLorsque vous commencez à coder un site web, il est crucial de bien organiser vos fichiers pour éviter de vous perdre dans un **chaos de documents** et pour garder votre projet **structuré** à long terme. Une bonne structure de projet vous aide à comprendre rapidement où se trouve chaque élément, mais aussi à collaborer plus facilement avec d\'autres développeurs.\n\nCette leçon vous explique comment organiser vos fichiers et définir une **arborescence de projet** propre, efficace et évolutive.\n\n---\n\n## L\'importance d\'une bonne organisation\n\nUne bonne structure de projet permet :\n\n- De **séparer les différents types de fichiers** (HTML, CSS, JavaScript, images, etc.).\n- D\'éviter la confusion, surtout quand le projet grandit.\n- De garder une **visibilité claire** sur l\'organisation des fichiers.\n- D\'améliorer la collaboration avec d\'autres développeurs, car une structure cohérente est universelle.\n\nImaginez que vous avez un **projet de site web** avec une seule page. À mesure que le site devient plus complexe, vous allez devoir organiser des **sections**, **pages**, et ajouter des **ressources** comme des images ou des fichiers JS. Une structure claire évitera de vous retrouver avec des fichiers éparpillés un peu partout !\n\n---\n\n## Structure de base d’un projet web\n\nUn projet web classique doit avoir une structure qui sépare les différentes parties de votre site. Voici une structure de base que nous allons suivre pour ce parcours :\n\n\'\'\'arborescence\nmon-premier-site/ <-- Dossier racine du projet\n│\n├── index.html <-- Fichier HTML principal\n├── style.css <-- Fichier de styles CSS\n├── script.js <-- Fichier JavaScript\n├── images/ <-- Dossier pour stocker les images\n│ ├── logo.png <-- Exemple d’image\n│ └── fond.jpg\n└── fonts/ <-- Dossier pour les polices\n└── OpenSans-Regular.ttf <-- Exemple de police personnalisée\n\'\'\'\n\n### Explication de chaque dossier et fichier :\n\n- **index.html** : Le fichier principal de votre site, celui qui sera chargé par défaut lorsqu\'un utilisateur visitera votre site. Il contient la structure HTML de la page d\'accueil.\n- **style.css** : Le fichier contenant les styles CSS qui définissent l\'apparence de la page (couleurs, tailles de police, espacements, etc.).\n- **script.js** : Le fichier JavaScript qui ajoute des interactions ou des animations à votre site.\n- **images/** : Ce dossier contient toutes les images utilisées sur votre site, comme des logos, des icônes, des photos, etc.\n- **fonts/** : Ce dossier est destiné à contenir toutes les polices personnalisées que vous utilisez dans votre site.\n\n---\n\n## L’organisation par dossier\n\nPourquoi est-il important de **séparer** les fichiers par dossier ?\n\n- **Clarté et lisibilité** : Lorsque vous organisez vos fichiers dans des dossiers, vous avez une vision plus claire de l’ensemble du projet. Vous savez exactement où chaque type de fichier doit se trouver.\n- **Évolutivité** : À mesure que votre projet grandit, vous aurez peut-être besoin d’ajouter plusieurs pages ou plusieurs scripts. En ayant une structure déjà bien définie, vous pouvez rapidement étendre le projet sans vous perdre.\n- **Collaboration facile** : Si vous travaillez avec d\'autres développeurs, une structure de projet bien définie permet à tous de s\'y retrouver facilement. Cela évite les erreurs et les doublons dans les fichiers.\n\n---\n\n## Nommer les fichiers correctement\n\nIl est également important de bien nommer vos fichiers pour rendre votre projet encore plus clair. Voici quelques bonnes pratiques de nommage :\n\n- **Utiliser des noms explicites** : Ne nommez pas vos fichiers avec des noms génériques comme `page1.html` ou `style.css`. Privilégiez des noms comme `index.html` pour la page principale, `contact.html` pour la page de contact, et `style.css` pour la feuille de style.\n- **Utiliser des minuscules et des tirets** : Evitez les espaces dans les noms de fichiers. Par exemple, utilisez `mon-site.css` au lieu de `Mon Site.css`.\n- **Utiliser des extensions appropriées** : Assurez-vous que vos fichiers aient des extensions correctes, comme `.html` pour les fichiers HTML, `.css` pour les fichiers CSS, `.js` pour les fichiers JavaScript, etc.\n\n---\n\n## Gérer plusieurs pages dans votre projet\n\nSi vous avez un site avec plusieurs pages (par exemple, une page d\'accueil, une page de contact, et une page \"à propos\"), vous pouvez créer des fichiers HTML supplémentaires et les organiser ainsi :\n\n\'\'\'arborescence\nmon-premier-site/\n│\n├── index.html <-- Page d\'accueil\n├── contact.html <-- Page de contact\n├── about.html <-- Page à propos\n├── style.css <-- Fichier de styles CSS\n├── script.js <-- Fichier JavaScript\n├── images/ <-- Dossier pour les images\n└── fonts/ <-- Dossier pour les polices\n\'\'\'\n\nAinsi, chaque page HTML a son propre fichier distinct, mais elles partagent toutes les mêmes ressources (CSS, JavaScript, images) dans des dossiers communs. Cela rend le projet plus facile à maintenir.\n\n---\n\n## Exemple de projet évolutif\n\nAu fur et à mesure que votre projet devient plus complexe, vous pouvez rajouter des sous-dossiers pour organiser encore mieux votre travail. Par exemple :\n\n\'\'\'arborescence\nmon-premier-site/\n│\n├── index.html <-- Page d\'accueil\n├── about.html <-- Page à propos\n├── contact.html <-- Page de contact\n├── assets/ <-- Dossier pour toutes les ressources\n│ ├── css/ <-- Dossier pour les styles CSS\n│ │ └── main.css\n│ ├── js/ <-- Dossier pour les scripts JavaScript\n│ │ └── app.js\n│ ├── images/ <-- Dossier pour les images\n│ │ ├── logo.png\n│ │ └── banner.jpg\n│ └── fonts/ <-- Dossier pour les polices\n│ └── OpenSans-Regular.ttf\n└── README.md <-- Fichier pour décrire le projet\n\'\'\'\n\n### Avantages de cette structure :\n- **Séparation des ressources** : Les fichiers CSS, JavaScript, images et polices sont tous dans leur propre sous-dossier sous `assets/`. Cela rend l\'ensemble du projet plus clair.\n- **Facilité de gestion** : À mesure que le site se développe, vous pouvez ajouter d\'autres ressources sans encombrer le dossier racine.\n- **Scalabilité** : Cette structure peut facilement s\'adapter à des projets plus grands.\n\n---\n\n## Résumé\n\nUne bonne organisation des fichiers d’un projet web est essentielle pour travailler efficacement et maintenir le code propre. Voici les points essentiels à retenir :\n\n- Organisez les fichiers dans des dossiers distincts : `html`, `css`, `js`, `images`, etc.\n- Utilisez des **noms explicites** et **clairs** pour vos fichiers.\n- Si votre projet devient plus complexe, n’hésitez pas à utiliser des sous-dossiers pour séparer encore plus les ressources.\n\n---\n\n## À retenir\n\n- Une bonne **structure de projet** permet de gérer facilement votre site web, même s’il devient complexe.\n- Séparer les fichiers par **type** et **fonction** (CSS, JS, images) aide à garder un projet clair et lisible.\n- Utilisez des **noms cohérents** pour vos fichiers et dossiers afin de faciliter le travail et la collaboration.\n\nDans la prochaine leçon, nous allons **créer notre première page HTML** et l\'enrichir avec des styles CSS, en appliquant tout ce que nous avons appris jusqu\'ici !\n\n', 3),
(47, 18, 'Exercice - Créer son dossier projet + fichier index.html vide', '## Objectif de l’exercice\n\nCet exercice a pour but de vous faire **organiser votre premier projet web** et de créer un fichier HTML de base, le tout dans une structure claire. Vous apprendrez à créer un dossier pour votre projet, à y ajouter un fichier HTML, et à poser les premières bases de votre travail.\n\n---\n\n## Instructions\n\n### 1. Créez un dossier pour votre projet\n\n1. Sur votre ordinateur, créez un **dossier** nommé `mon-premier-site` ou un autre nom que vous préférez.\n   \n   Ce dossier sera le **dossier racine** de votre projet, où vous organiserez tous vos fichiers (HTML, CSS, JS, images, etc.).\n\n### 2. Ouvrez ce dossier dans Visual Studio Code\n\n1. Ouvrez **VSCode**.\n2. Dans **VSCode**, allez dans le menu **Fichier > Ouvrir Dossier**.\n3. Sélectionnez le dossier `mon-premier-site` que vous venez de créer.\n\n### 3. Créez un fichier HTML de base\n\n1. Dans **VSCode**, faites un **clic droit** sur le dossier ouvert dans l\'explorateur de fichiers et choisissez **Nouveau fichier**.\n2. Nommez le fichier `index.html`.\n3. Ajoutez la structure de base suivante dans votre fichier `index.html` :\n\n\'\'\'html\n<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Mon Premier Site</title>\n</head>\n<body>\n    \n</body>\n</html>\n\'\'\'\n\n### 4. Enregistrez le fichier\n\nN\'oubliez pas d\'enregistrer le fichier en appuyant sur **Ctrl + S** (ou **Cmd + S** sur Mac).\n\n---\n\n## Résultat attendu\n\n- Un dossier nommé **`mon-premier-site`** contenant un fichier **`index.html`** avec la structure de base du HTML.\n- Le fichier `index.html` doit être **vide**, à l\'exception de la structure HTML de base que vous avez ajoutée.\n\n---\n\n## À retenir\n\n- Le dossier racine de votre projet contient tous les fichiers nécessaires à la construction de votre site web.\n- Le fichier `index.html` est essentiel car c\'est généralement le fichier qui sera chargé en premier lorsqu\'un utilisateur accède à votre site.\n- **VSCode** est l’outil principal où vous écrivez et modifiez votre code.\n\nDans la prochaine leçon, nous commencerons à **ajouter du contenu HTML** dans notre fichier `index.html`, en ajoutant du texte, des images et des liens !', 4),
(57, 31, 'Syntaxe HTML de base (<!DOCTYPE>, <html>, <head>, etc.)', '## Introduction\r\n\r\nHTML (HyperText Markup Language) est le **langage de balisage** utilisé pour structurer le contenu d’une page web. C’est la base de tout site web, et comprendre sa structure est essentiel pour pouvoir créer des pages claires et bien organisées.\r\n\r\nUn fichier HTML est composé de balises, qui sont des instructions qui indiquent au navigateur comment afficher le contenu.\r\n\r\n---\r\n\r\n## La structure de base d’une page HTML\r\n\r\nVoici la structure minimale d’un fichier HTML :\r\n\r\n\'\'\'\r\n<!DOCTYPE html>\r\n<html lang=\"fr\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Mon Premier Site</title>\r\n</head>\r\n<body>\r\n    <!-- Le contenu de votre page va ici -->\r\n</body>\r\n</html>\r\n\'\'\'\r\n\r\n### Décomposition des éléments :\r\n1. **<!DOCTYPE html>** : Cette ligne est utilisée pour indiquer au navigateur que le fichier utilise la dernière version de HTML (HTML5). Cela assure une compatibilité maximale avec les navigateurs modernes.\r\n2. **<html lang=\"fr\">** : La balise `<html>` englobe tout le contenu de la page. L\'attribut `lang=\"fr\"` spécifie que la langue du contenu est le français.\r\n3. **<head>** : Le bloc `<head>` contient des informations sur la page (métadonnées), comme le jeu de caractères, le titre de la page et d\'autres informations non visibles pour l\'utilisateur.\r\n    - **<meta charset=\"UTF-8\">** : Définit l\'encodage des caractères de la page, ce qui permet d’afficher correctement les caractères spéciaux.\r\n    - **<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">** : Permet de rendre la page responsive (adaptée aux appareils mobiles).\r\n    - **<title>Mon Premier Site</title>** : Le titre de la page, visible dans l\'onglet du navigateur.\r\n4. **<body>** : La balise `<body>` contient tout le contenu visible de la page (textes, images, liens, etc.).\r\n\r\n---\r\n\r\n## Résumé\r\n\r\n- Un fichier HTML commence par la déclaration **`<!DOCTYPE html>`**, puis s\'ouvre avec la balise `<html>`.\r\n- La section **`<head>`** contient des informations non visibles pour l\'utilisateur, comme l\'encodage et le titre.\r\n- Le contenu visible de la page est placé dans la balise **`<body>`**.\r\n\r\n---\r\n\r\n## À retenir\r\n\r\n- La balise **`<!DOCTYPE html>`** permet de spécifier la version HTML utilisée.\r\n- La structure de base d’un fichier HTML inclut **`<html>`, `<head>`, et `<body>`**.\r\n- Les informations importantes pour le navigateur (comme le titre ou l\'encodage) sont placées dans le `<head>`, tandis que le contenu visible est dans le `<body>`.', 1),
(58, 31, 'Créer une première page avec un titre et un paragraphe', '## Introduction\r\n\r\nMaintenant que vous comprenez la structure de base d\'un fichier HTML, voyons comment ajouter du contenu à une page. Dans cette leçon, nous allons créer une page simple avec un titre et un paragraphe de texte.\r\n\r\n---\r\n\r\n## Créer une page avec un titre et un paragraphe\r\n\r\nVoici un exemple simple de page HTML avec un titre et un paragraphe :\r\n\r\n\'\'\'\r\n<!DOCTYPE html>\r\n<html lang=\"fr\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Ma Première Page</title>\r\n</head>\r\n<body>\r\n    <h1>Bienvenue sur ma première page HTML</h1>\r\n    <p>C\'est mon tout premier projet en développement web. Bravo à moi !</p>\r\n</body>\r\n</html>\r\n\'\'\'\r\n\r\n### Explication du code :\r\n1. **`<h1>Bienvenue sur ma première page HTML</h1>`** : La balise `<h1>` est utilisée pour définir un titre principal. C\'est l\'un des éléments les plus importants d\'une page.\r\n2. **`<p>C\'est mon tout premier projet en développement web. Bravo à moi !</p>`** : La balise `<p>` est utilisée pour définir un paragraphe de texte.\r\n\r\n---\r\n\r\n## Résumé\r\n\r\n- Le titre de la page se trouve dans la balise `<title>` dans la section `<head>`.\r\n- Le titre principal de la page (visible) est créé avec la balise `<h1>`.\r\n- Le contenu textuel est structuré avec la balise `<p>` pour un paragraphe.\r\n\r\n---\r\n\r\n## À retenir\r\n\r\n- Utilisez la balise **`<h1>`** pour le titre principal de votre page.\r\n- Utilisez la balise **`<p>`** pour ajouter du texte sous forme de paragraphe.', 2),
(59, 31, 'Exercice – Créer une première page avec un titre et un paragraphe', '## Objectif de l’exercice\r\n\r\nDans cet exercice, vous allez créer une page HTML basique avec un titre principal et un paragraphe de texte. Cela vous permettra de vous familiariser avec les balises HTML pour structurer le contenu de votre page.\r\n\r\n---\r\n\r\n## Instructions\r\n\r\n### 1. Créez votre fichier `index.html`\r\n\r\n1. Ouvrez **VSCode**.\r\n2. Dans le dossier de votre projet (par exemple `mon-premier-site`), créez un fichier nommé `index.html`.\r\n3. Dans ce fichier, ajoutez la structure de base HTML que vous avez apprise dans la leçon précédente (en utilisant `<!DOCTYPE html>`, `<html>`, `<head>`, etc.).\r\n\r\n### 2. Ajoutez un titre `<h1>`\r\n\r\nDans la balise `<body>`, ajoutez un titre principal avec la balise `<h1>` et écrivez \"Bienvenue sur ma première page HTML\".\r\n\r\nExemple :\r\n\'\'\'\r\n<h1>Bienvenue sur ma première page HTML</h1>\r\n\'\'\'\r\n\r\n### 3. Ajoutez un paragraphe `<p>`\r\n\r\nJuste en dessous du titre, ajoutez un paragraphe avec la balise `<p>`. Écrivez quelque chose de simple, comme \"C\'est mon premier projet en développement web. Bravo à moi !\".\r\n\r\nExemple :\r\n\'\'\'\r\n<p>C\'est mon premier projet en développement web. Bravo à moi !</p>\r\n\'\'\'\r\n\r\n### 4. Enregistrez et ouvrez votre page\r\n\r\n1. Enregistrez votre fichier `index.html`.\r\n2. Ouvrez-le dans un navigateur pour voir le résultat.\r\n3. Vous devriez voir votre titre en grand (grâce à `<h1>`) et un paragraphe sous celui-ci.\r\n\r\n---\r\n\r\n## Résultat attendu\r\n\r\nVous devez avoir créé une page HTML basique avec :\r\n- Un titre principal `<h1>` : \"Bienvenue sur ma première page HTML\".\r\n- Un paragraphe `<p>` : \"C\'est mon premier projet en développement web. Bravo à moi !\".\r\n\r\n---\r\n\r\n## À retenir\r\n\r\n- La balise **`<h1>`** est utilisée pour les titres principaux sur la page.\r\n- La balise **`<p>`** est utilisée pour créer des paragraphes de texte.\r\n- La structure de base d’une page HTML inclut **`<html>`, `<head>`, et `<body>`**.\r\n\r\n---\r\n\r\n**Note** : Une fois cet exercice terminé, vous pouvez commencer à personnaliser le texte et à ajouter d’autres éléments HTML, comme des images ou des liens, dans les prochaines leçons !', 3),
(60, 32, 'Titres, paragraphes, gras, italique', '## Introduction\r\n\r\nDans cette leçon, nous allons apprendre à structurer et styliser le texte de notre page web. HTML nous permet de définir des titres de différentes tailles, d’ajouter des paragraphes, et de mettre en valeur du texte avec des styles comme le gras et l’italique.\r\n\r\nLes balises HTML suivantes sont essentielles pour travailler avec du texte :\r\n\r\n- **`<h1>` à `<h6>`** pour les titres\r\n- **`<p>`** pour les paragraphes\r\n- **`<strong>`** pour le texte en gras\r\n- **`<em>`** pour le texte en italique\r\n\r\n---\r\n\r\n## Les titres avec `<h1>`, `<h2>`, `<h3>`, etc.\r\n\r\nLes balises **`<h1>`** à **`<h6>`** sont utilisées pour définir les titres de votre page. Plus le numéro est petit, plus le titre est **important** et **gros**. Le titre **`<h1>`** est le plus important et est souvent utilisé pour le titre principal d’une page.\r\n\r\nExemple :\r\n\'\'\'\r\n<h1>Bienvenue sur mon site web !</h1>\r\n<h2>À propos de moi</h2>\r\n<h3>Mes projets récents</h3>\r\n\'\'\'\r\n\r\nLes balises **`<h1>`** à **`<h6>`** permettent donc de hiérarchiser le contenu de votre page. Cela aide non seulement à la structure, mais aussi à l’**accessibilité** et au **référencement** (SEO).\r\n\r\n---\r\n\r\n## Les paragraphes avec `<p>`\r\n\r\nLes paragraphes sont définis avec la balise **`<p>`**. Chaque texte entre les balises `<p>` est considéré comme un paragraphe distinct.\r\n\r\nExemple :\r\n\'\'\'\r\n<p>Voici mon premier paragraphe de texte. C\'est super !</p>\r\n<p>Voici un deuxième paragraphe qui continue l\'histoire.</p>\r\n\'\'\'\r\n\r\nLes paragraphes permettent de séparer les sections de texte et rendent votre contenu plus lisible.\r\n\r\n---\r\n\r\n## Appliquer du style avec **`<strong>`** et **`<em>`**\r\n\r\nHTML propose aussi des balises pour mettre en valeur certaines parties de texte :\r\n- **`<strong>`** : permet de mettre le texte en **gras**. C\'est utilisé pour indiquer que quelque chose est important.\r\n- **`<em>`** : permet de mettre le texte en **italique**. C\'est utilisé pour indiquer une emphase.\r\n\r\nExemple :\r\n\'\'\'\r\n<p>Je suis <strong>très</strong> content d\'apprendre le développement web !</p>\r\n<p>Ce site est <em>vraiment</em> génial !</p>\r\n\'\'\'\r\n\r\n- Le texte entre **`<strong>`** sera en **gras**.\r\n- Le texte entre **`<em>`** sera en **italique**.\r\n\r\n---\r\n\r\n## Résumé\r\n\r\n- Utilisez **`<h1>` à `<h6>`** pour définir les titres dans votre page, en fonction de l\'importance de chaque titre.\r\n- Utilisez **`<p>`** pour délimiter chaque paragraphe.\r\n- **`<strong>`** met en gras, et **`<em>`** met en italique.\r\n\r\n---\r\n\r\n## À retenir\r\n\r\n- Les balises **`<h1>` à `<h6>`** servent à définir les titres, de plus grand à plus petit.\r\n- La balise **`<p>`** est utilisée pour les paragraphes de texte.\r\n- Utilisez **`<strong>`** pour le texte en gras et **`<em>`** pour le texte en italique.\r\n\r\nDans la prochaine leçon, nous verrons comment ajouter des **liens** et des **images** dans votre page web avec les balises **`<a>`** et **`<img>`**.', 1),
(61, 32, 'Liens hypertextes et images', '## Introduction\r\n\r\nDans cette leçon, nous allons apprendre à ajouter des **liens** et des **images** à votre page HTML. Ces éléments sont essentiels pour rendre votre site web interactif et visuellement attrayant.\r\n\r\n- Les **liens hypertextes** vous permettent de naviguer entre les pages d\'un site ou vers des ressources externes.\r\n- Les **images** permettent de rendre votre site plus visuel et de présenter des éléments graphiques.\r\n\r\n---\r\n\r\n## Les liens avec `<a>`\r\n\r\nUn **lien hypertexte** est créé avec la balise **`<a>`**. Elle permet de rediriger l’utilisateur vers une autre page web ou ressource.\r\n\r\n### Syntaxe de la balise `<a>` :\r\n\r\n\'\'\'\r\n<a href=\"URL\">Texte du lien</a>\r\n\'\'\'\r\n\r\n- **`href`** : L’attribut **`href`** définit l\'URL (adresse) vers laquelle le lien redirige.\r\n- Le **texte du lien** est ce que l’utilisateur voit et sur lequel il peut cliquer.\r\n\r\nExemple :\r\n\'\'\'\r\n<a href=\"https://www.openclassrooms.com\">Visitez OpenClassrooms</a>\r\n\'\'\'\r\n\r\nCe lien renvoie l\'utilisateur vers le site d\'OpenClassrooms. Lorsque vous cliquez sur le texte **\"Visitez OpenClassrooms\"**, vous êtes redirigé vers l\'URL spécifiée.\r\n\r\n### Lien vers une autre page de votre site\r\n\r\nSi vous voulez créer un lien vers une autre page de votre propre site, il suffit de spécifier le nom du fichier HTML dans l\'attribut `href`.\r\n\r\nExemple :\r\n\'\'\'\r\n<a href=\"contact.html\">Page de contact</a>\r\n\'\'\'\r\n\r\nCela redirige l\'utilisateur vers la page **`contact.html`** dans votre projet.\r\n\r\n---\r\n\r\n## Les images avec `<img>`\r\n\r\nLes images sont ajoutées à une page web avec la balise **`<img>`**. Cette balise est un **élément vide**, ce qui signifie qu\'elle n’a pas de balise de fermeture.\r\n\r\n### Syntaxe de la balise `<img>` :\r\n\r\n\'\'\'\r\n<img src=\"URL_de_l_image\" alt=\"Description de l\'image\">\r\n\'\'\'\r\n\r\n- **`src`** : L’attribut **`src`** définit le chemin de l\'image. Cela peut être un fichier local (image dans votre projet) ou une URL d\'image externe.\r\n- **`alt`** : L’attribut **`alt`** fournit une description de l’image pour les personnes utilisant des lecteurs d\'écran, et est également affiché si l\'image ne peut pas être chargée.\r\n\r\nExemple d\'image locale :\r\n\'\'\'\r\n<img src=\"images/logo.png\" alt=\"Logo du site\">\r\n\'\'\'\r\n\r\nDans cet exemple, l’image **logo.png** est stockée dans le dossier **`images/`** de votre projet. Le texte **\"Logo du site\"** sera affiché si l’image n\'est pas disponible.\r\n\r\nExemple d\'image externe :\r\n\'\'\'\r\n<img src=\"https://www.example.com/images/photo.jpg\" alt=\"Photo d\'exemple\">\r\n\'\'\'\r\n\r\n---\r\n\r\n## Résumé\r\n\r\n- **Les liens** sont créés avec la balise `<a>` et permettent de rediriger l’utilisateur vers une autre page ou une ressource externe.\r\n- **Les images** sont ajoutées avec la balise `<img>`, qui permet d’insérer une image dans la page avec les attributs `src` et `alt`.\r\n\r\n---\r\n\r\n## À retenir\r\n\r\n- La balise **`<a>`** permet de créer des liens vers d\'autres pages ou sites.\r\n- La balise **`<img>`** permet d\'ajouter des images à une page, avec les attributs `src` pour le chemin de l\'image et `alt` pour la description.\r\n- Utilisez les **liens** pour rendre votre site interactif et les **images** pour rendre votre page visuellement attrayante.\r\n\r\nDans la prochaine leçon, nous allons voir comment **travailler avec les listes et tableaux** pour structurer des informations sous forme de liste ou de tableau.', 2),
(62, 32, 'Attributs HTML essentiels (href, src, alt, etc.)', '## Introduction\r\n\r\nDans cette leçon, nous allons approfondir l’utilisation des **attributs HTML**, qui sont des informations supplémentaires fournies à certaines balises pour leur donner des caractéristiques ou des comportements spécifiques. Les attributs sont très importants pour rendre les éléments HTML interactifs et accessibles.\r\n\r\n---\r\n\r\n## Les attributs HTML : Définition\r\n\r\nLes attributs HTML sont utilisés pour ajouter des informations supplémentaires à une balise HTML. Ils permettent de personnaliser le comportement ou l\'apparence d\'un élément. Chaque attribut a une **valeur** associée, qui précise le paramètre que vous souhaitez définir.\r\n\r\nLes attributs sont toujours placés **dans la balise d\'ouverture** et prennent la forme : **`attribut=\"valeur\"`**.\r\n\r\n---\r\n\r\n## L\'attribut `href` pour les liens\r\n\r\nL\'attribut **`href`** est utilisé dans la balise **`<a>`** pour définir l\'URL vers laquelle le lien va rediriger l’utilisateur.\r\n\r\n### Syntaxe :\r\n\'\'\'\r\n<a href=\"https://www.example.com\">Cliquez ici</a>\r\n\'\'\'\r\n\r\n- L\'attribut **`href`** contient l\'adresse (URL) vers laquelle le lien va diriger l\'utilisateur.\r\n- Exemple : Dans le lien ci-dessus, l\'utilisateur sera redirigé vers **https://www.example.com** lorsqu\'il cliquera sur le texte **\"Cliquez ici\"**.\r\n\r\n#### Lien interne (vers une autre page du même site)\r\nSi vous souhaitez lier une autre page de votre propre site, utilisez simplement le nom du fichier ou le chemin relatif :\r\n\'\'\'\r\n<a href=\"contact.html\">Page de contact</a>\r\n\'\'\'\r\n\r\n---\r\n\r\n## L\'attribut `src` pour les images\r\n\r\nL\'attribut **`src`** est utilisé dans la balise **`<img>`** pour définir le **chemin** de l\'image à afficher sur la page.\r\n\r\n### Syntaxe :\r\n\'\'\'\r\n<img src=\"images/photo.jpg\" alt=\"Une belle photo\">\r\n\'\'\'\r\n\r\n- **`src`** définit le chemin vers le fichier image. Il peut s\'agir d\'une **URL externe** (si l\'image provient d\'Internet) ou d\'un **chemin relatif** (si l\'image est dans votre projet).\r\n- Exemple : Dans le code ci-dessus, l\'image **photo.jpg** se trouve dans le dossier **`images/`**.\r\n\r\n#### Chemin relatif et absolu\r\n- **Chemin relatif** : Utilisé lorsque l\'image est dans un dossier de votre projet (comme **images/photo.jpg**).\r\n- **Chemin absolu** : Utilisé lorsque l\'image est sur un autre site (par exemple, **https://www.example.com/photo.jpg**).\r\n\r\n---\r\n\r\n## L\'attribut `alt` pour l’accessibilité des images\r\n\r\nL\'attribut **`alt`** est utilisé pour fournir une **description alternative** de l’image. C’est crucial pour les personnes qui utilisent des lecteurs d\'écran ou pour les cas où l’image ne peut pas être chargée.\r\n\r\n### Syntaxe :\r\n\'\'\'\r\n<img src=\"images/photo.jpg\" alt=\"Une belle photo d\'un paysage montagneux\">\r\n\'\'\'\r\n\r\n- **`alt`** : Description de l\'image pour les utilisateurs qui ne peuvent pas voir l\'image (par exemple, les personnes malvoyantes).\r\n- Exemple : La description **\"Une belle photo d\'un paysage montagneux\"** permet de comprendre ce qu\'il y a dans l\'image, même si l\'image ne peut pas être chargée.\r\n\r\n---\r\n\r\n## Autres attributs utiles\r\n\r\n### L\'attribut `target` pour les liens\r\nL\'attribut **`target`** est utilisé pour définir où ouvrir le lien. Par défaut, un lien ouvre la page dans le même onglet. Avec **`target=\"_blank\"`**, le lien s\'ouvrira dans un **nouvel onglet**.\r\n\r\nExemple :\r\n\'\'\'\r\n<a href=\"https://www.example.com\" target=\"_blank\">Ouvrir dans un nouvel onglet</a>\r\n\'\'\'\r\n\r\n### L\'attribut `title` pour les éléments\r\nL\'attribut **`title`** fournit une information supplémentaire qui est généralement affichée comme **infobulle** lorsqu\'on survole un élément avec la souris.\r\n\r\nExemple :\r\n\'\'\'\r\n<a href=\"https://www.example.com\" title=\"Visitez Example.com\">Example</a>\r\n\'\'\'\r\n\r\nLorsque l\'utilisateur survole le lien, une petite infobulle apparaît avec le texte \"Visitez Example.com\".\r\n\r\n---\r\n\r\n## Résumé\r\n\r\n- **`href`** : Définit l\'URL dans un lien (**`<a>`**).\r\n- **`src`** : Définit le chemin vers une image (**`<img>`**).\r\n- **`alt`** : Fournit une description alternative pour les images, utilisé principalement pour l’accessibilité.\r\n- **`target=\"_blank\"`** : Ouvre un lien dans un nouvel onglet.\r\n- **`title`** : Affiche une infobulle lorsque l\'utilisateur survole un élément.\r\n\r\n---\r\n\r\n## À retenir\r\n\r\n- Utilisez **`href`** pour lier des pages ou des ressources externes.\r\n- L\'attribut **`src`** est utilisé pour spécifier le chemin d\'une image.\r\n- **`alt`** est essentiel pour l’accessibilité des images, surtout pour les personnes utilisant un lecteur d\'écran.\r\n- Les attributs comme **`target`** et **`title`** ajoutent des fonctionnalités et améliorent l’expérience utilisateur.\r\n\r\nDans la prochaine leçon, nous explorerons comment **travailler avec les listes et tableaux** pour structurer des informations plus complexes.', 3),
(63, 32, 'Exercice – Ajouter des liens et des images à votre page', '## Objectif de l’exercice\r\n\r\nDans cet exercice, vous allez mettre en pratique ce que vous avez appris sur les **liens** et les **images**. Vous allez créer des liens vers d\'autres pages et ajouter des images à votre page HTML.\r\n\r\n---\r\n\r\n## Instructions\r\n\r\n### 1. Créez un fichier `index.html`\r\n\r\nSi ce n’est pas déjà fait, créez un fichier **`index.html`** dans le dossier de votre projet et ajoutez-y la structure de base que vous avez déjà apprise.\r\n\r\n### 2. Ajoutez un lien vers une autre page\r\n\r\nAjoutez un lien vers une autre page de votre site (vous pouvez créer une page fictive pour cela si vous n\'en avez pas encore). Par exemple, créez un lien vers une page **\"contact.html\"**.\r\n\r\nExemple de code :\r\n\'\'\'\r\n<a href=\"contact.html\">Page de contact</a>\r\n\'\'\'\r\n\r\n### 3. Ajoutez un lien vers un site externe\r\n\r\nAjoutez un lien vers un site externe (par exemple, **OpenClassrooms**). Ce lien doit s\'ouvrir dans un **nouvel onglet** (en utilisant l\'attribut **`target=\"_blank\"`).\r\n\r\nExemple de code :\r\n\'\'\'\r\n<a href=\"https://www.openclassrooms.com\" target=\"_blank\">Visitez OpenClassrooms</a>\r\n\'\'\'\r\n\r\n### 4. Ajoutez une image à votre page\r\n\r\nAjoutez une image sur votre page avec la balise **`<img>`**. Vous pouvez soit utiliser une image locale (dans votre dossier de projet), soit une image venant d’une URL externe.\r\n\r\n#### Exemple d’image locale :\r\n\'\'\'\r\n<img src=\"images/logo.png\" alt=\"Logo du site\">\r\n\'\'\'\r\n\r\n#### Exemple d’image externe :\r\n\'\'\'\r\n<img src=\"https://www.example.com/photo.jpg\" alt=\"Une photo d\'exemple\">\r\n\'\'\'\r\n\r\n### 5. Enregistrez et testez votre page\r\n\r\n1. Enregistrez votre fichier `index.html`.\r\n2. Ouvrez-le dans un navigateur pour tester vos liens et images.\r\n3. Vérifiez :\r\n   - Que le lien vers la page \"contact.html\" fonctionne.\r\n   - Que le lien vers OpenClassrooms s\'ouvre dans un nouvel onglet.\r\n   - Que l\'image s’affiche correctement.\r\n\r\n---\r\n\r\n## Résultat attendu\r\n\r\nVous devez avoir une page avec :\r\n- Un **lien interne** vers la page **\"contact.html\"**.\r\n- Un **lien externe** vers **OpenClassrooms** qui s\'ouvre dans un nouvel onglet.\r\n- Une **image** insérée dans votre page, soit locale soit provenant d’une URL externe.\r\n\r\n---\r\n\r\n## À retenir\r\n\r\n- Utilisez **`<a>`** pour créer des liens.\r\n- L\'attribut **`target=\"_blank\"`** permet d\'ouvrir un lien dans un nouvel onglet.\r\n- Utilisez **`<img>`** pour insérer des images, avec les attributs **`src`** (source) et **`alt`** (description).\r\n\r\n---\r\n\r\n**Note** : Vous pouvez personnaliser vos liens et images en fonction de vos besoins, mais assurez-vous que chaque élément soit correctement mis en place et testé avant de passer à la suite !', 4),
(64, 33, 'Listes non ordonnées et ordonnées', '## Introduction\r\n\r\nLes listes sont un excellent moyen de structurer et d\'organiser des informations sur une page web. HTML offre plusieurs types de listes : \r\n- Les **listes non ordonnées** (avec des puces)\r\n- Les **listes ordonnées** (avec des numéros)\r\n\r\nLes listes sont très utiles lorsque vous avez des éléments à présenter de manière séquencée ou groupée.\r\n\r\n---\r\n\r\n## Liste non ordonnée (`<ul>`)\r\n\r\nUne **liste non ordonnée** est une liste où les éléments sont précédés d\'une puce (un petit cercle par défaut).\r\n\r\n### Syntaxe :\r\n\'\'\'\r\n<ul>\r\n    <li>Élément 1</li>\r\n    <li>Élément 2</li>\r\n    <li>Élément 3</li>\r\n</ul>\r\n\'\'\'\r\n\r\n- La balise **`<ul>`** définit la liste non ordonnée.\r\n- Les éléments de la liste sont définis avec la balise **`<li>`** (pour **list item**).\r\n  \r\nExemple :\r\n\'\'\'\r\n<ul>\r\n    <li>Pomme</li>\r\n    <li>Banane</li>\r\n    <li>Cerise</li>\r\n</ul>\r\n\'\'\'\r\n\r\nAffichera une liste avec des puces :\r\n- Pomme\r\n- Banane\r\n- Cerise\r\n\r\n---\r\n\r\n## Liste ordonnée (`<ol>`)\r\n\r\nUne **liste ordonnée** est une liste où les éléments sont numérotés (1, 2, 3, ...).\r\n\r\n### Syntaxe :\r\n\'\'\'\r\n<ol>\r\n    <li>Premier élément</li>\r\n    <li>Deuxième élément</li>\r\n    <li>Troisième élément</li>\r\n</ol>\r\n\'\'\'\r\n\r\n- La balise **`<ol>`** définit la liste ordonnée.\r\n- Les éléments de la liste sont définis avec **`<li>`**.\r\n\r\nExemple :\r\n\'\'\'\r\n<ol>\r\n    <li>Allumer l\'ordinateur</li>\r\n    <li>Ouvrir le navigateur</li>\r\n    <li>Aller sur mon site</li>\r\n</ol>\r\n\'\'\'\r\n\r\nAffichera une liste numérotée :\r\n1. Allumer l\'ordinateur\r\n2. Ouvrir le navigateur\r\n3. Aller sur mon site\r\n\r\n---\r\n\r\n## Liste imbriquée (listes à plusieurs niveaux)\r\n\r\nIl est également possible de créer des **listes imbriquées**, c’est-à-dire une liste à l’intérieur d’une autre liste.\r\n\r\nExemple :\r\n\'\'\'\r\n<ul>\r\n    <li>Fruits\r\n        <ul>\r\n            <li>Orange</li>\r\n            <li>Pomme</li>\r\n            <li>Banane</li>\r\n        </ul>\r\n    </li>\r\n    <li>Légumes\r\n        <ul>\r\n            <li>Carotte</li>\r\n            <li>Épinards</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\'\'\'\r\n\r\nCela affichera une liste non ordonnée avec des sous-listes imbriquées.\r\n\r\n---\r\n\r\n## Résumé\r\n\r\n- **`<ul>`** crée une liste non ordonnée avec des puces.\r\n- **`<ol>`** crée une liste ordonnée avec des numéros.\r\n- **`<li>`** définit un élément dans une liste.\r\n- Vous pouvez imbriquer des listes pour créer des sous-listes.\r\n\r\n---\r\n\r\n## À retenir\r\n\r\n- Utilisez **`<ul>`** pour les listes non ordonnées et **`<ol>`** pour les listes ordonnées.\r\n- Les éléments de la liste sont toujours définis avec **`<li>`**.\r\n- Vous pouvez **imbriquer** des listes à l’intérieur d\'autres listes pour structurer des informations complexes.', 1),
(65, 33, 'Introduction aux tableaux HTML', '## Introduction\r\n\r\nLes tableaux HTML sont un excellent moyen de présenter des données sous forme de grille (lignes et colonnes). Ce type de structure est souvent utilisé pour afficher des informations comme des prix, des horaires, des résultats, etc.\r\n\r\nLes tableaux HTML sont créés à l’aide des balises **`<table>`**, **`<tr>`**, **`<th>`**, et **`<td>`**.\r\n\r\n---\r\n\r\n## Structure de base d’un tableau\r\n\r\nLa structure d’un tableau HTML est la suivante :\r\n1. **`<table>`** : Définie la table elle-même.\r\n2. **`<tr>`** : Définie une ligne du tableau.\r\n3. **`<th>`** : Définie une cellule d\'en-tête (les titres de colonnes).\r\n4. **`<td>`** : Définie une cellule de données (les valeurs dans les colonnes).\r\n\r\n### Syntaxe :\r\n\'\'\'\r\n<table>\r\n    <tr>\r\n        <th>Titre 1</th>\r\n        <th>Titre 2</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Valeur 1</td>\r\n        <td>Valeur 2</td>\r\n    </tr>\r\n</table>\r\n\'\'\'\r\n\r\n---\r\n\r\n## Exemple de tableau simple\r\n\r\nVoici un exemple simple de tableau qui présente des informations :\r\n\r\n\'\'\'\r\n<table>\r\n    <tr>\r\n        <th>Nom</th>\r\n        <th>Âge</th>\r\n        <th>Ville</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Jean</td>\r\n        <td>25</td>\r\n        <td>Paris</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Marie</td>\r\n        <td>30</td>\r\n        <td>Lyon</td>\r\n    </tr>\r\n</table>\r\n\'\'\'\r\n\r\nCela produira un tableau avec des en-têtes et des lignes de données :\r\n\r\n| Nom  | Âge | Ville |\r\n|------|-----|-------|\r\n| Jean | 25  | Paris |\r\n| Marie| 30  | Lyon  |\r\n\r\n---\r\n\r\n## Ajouter des bordures et du style au tableau\r\n\r\nIl est possible de **styler** un tableau à l’aide de **CSS**. Vous pouvez ajouter des bordures, changer la couleur des cellules, ou appliquer des espacements.\r\n\r\nExemple de tableau avec bordures en CSS :\r\n\'\'\'\r\n<table style=\"border: 1px solid black; border-collapse: collapse;\">\r\n    <tr>\r\n        <th style=\"border: 1px solid black;\">Nom</th>\r\n        <th style=\"border: 1px solid black;\">Âge</th>\r\n        <th style=\"border: 1px solid black;\">Ville</th>\r\n    </tr>\r\n    <tr>\r\n        <td style=\"border: 1px solid black;\">Jean</td>\r\n        <td style=\"border: 1px solid black;\">25</td>\r\n        <td style=\"border: 1px solid black;\">Paris</td>\r\n    </tr>\r\n</table>\r\n\'\'\'\r\n\r\n---\r\n\r\n## Résumé\r\n\r\n- **`<table>`** définit le tableau.\r\n- **`<tr>`** définit une ligne du tableau.\r\n- **`<th>`** définit une cellule d\'en-tête.\r\n- **`<td>`** définit une cellule de données.\r\n\r\n---\r\n\r\n## À retenir\r\n\r\n- Utilisez **`<table>`** pour créer un tableau, **`<tr>`** pour les lignes, **`<th>`** pour les en-têtes et **`<td>`** pour les données.\r\n- Vous pouvez ajouter du **CSS** pour améliorer l’apparence de vos tableaux (bordures, couleurs, etc.).', 2),
(66, 33, 'Exercice – Créer une liste et un tableau', '## Objectif de l’exercice\r\n\r\nDans cet exercice, vous allez créer :\r\n1. Une **liste ordonnée** (avec des numéros) pour organiser des informations.\r\n2. Un **tableau** pour afficher des données sous forme de grille.\r\n\r\nCet exercice vous permettra de comprendre comment structurer des informations dans des formats clairs et lisibles.\r\n\r\n---\r\n\r\n## Instructions\r\n\r\n### 1. Créez un fichier `index.html`\r\n\r\nSi ce n’est pas déjà fait, ouvrez **VSCode** et créez un fichier **`index.html`** dans le dossier de votre projet.\r\n\r\n### 2. Créez une liste ordonnée\r\n\r\nDans votre fichier **`index.html`**, créez une **liste ordonnée** (avec des numéros) pour afficher une liste de tâches à accomplir. Par exemple, vous pouvez lister des étapes pour créer un projet web.\r\n\r\nExemple de code :\r\n\'\'\'\r\n<ol>\r\n    <li>Définir l’objectif du projet</li>\r\n    <li>Créer la structure de base</li>\r\n    <li>Écrire le code HTML</li>\r\n    <li>Styliser avec CSS</li>\r\n    <li>Tester et déployer</li>\r\n</ol>\r\n\'\'\'\r\n\r\n### 3. Créez un tableau\r\n\r\nEnsuite, créez un **tableau** pour afficher les informations suivantes sur des étudiants :\r\n\r\n| Nom     | Âge | Ville       |\r\n|---------|-----|-------------|\r\n| Jean    | 25  | Paris       |\r\n| Marie   | 30  | Lyon        |\r\n| Luc     | 28  | Marseille   |\r\n\r\nVous devez utiliser les balises **`<table>`**, **`<tr>`**, **`<th>`**, et **`<td>`** pour structurer le tableau.\r\n\r\nExemple de code :\r\n\'\'\'\r\n<table>\r\n    <tr>\r\n        <th>Nom</th>\r\n        <th>Âge</th>\r\n        <th>Ville</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Jean</td>\r\n        <td>25</td>\r\n        <td>Paris</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Marie</td>\r\n        <td>30</td>\r\n        <td>Lyon</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Luc</td>\r\n        <td>28</td>\r\n        <td>Marseille</td>\r\n    </tr>\r\n</table>\r\n\'\'\'\r\n\r\n### 4. Enregistrez et testez votre page\r\n\r\n1. Enregistrez votre fichier **`index.html`**.\r\n2. Ouvrez-le dans un navigateur pour voir la liste et le tableau.\r\n3. Vérifiez que :\r\n   - La **liste ordonnée** est correctement affichée avec des numéros.\r\n   - Le **tableau** affiche les données correctement avec les bonnes colonnes et lignes.\r\n\r\n---\r\n\r\n## Résultat attendu\r\n\r\nVous devez avoir une page avec :\r\n1. Une **liste ordonnée** des tâches.\r\n2. Un **tableau** avec les informations des étudiants (Nom, Âge, Ville).\r\n\r\n---\r\n\r\n## À retenir\r\n\r\n- Utilisez **`<ol>`** pour créer des listes ordonnées avec des numéros.\r\n- Utilisez **`<table>`** pour créer un tableau avec des lignes et des colonnes.\r\n- Chaque ligne du tableau est définie par **`<tr>`**, et chaque cellule de données est définie par **`<td>`**.\r\n- Utilisez **`<th>`** pour les cellules d\'en-tête du tableau.\r\n\r\n---\r\n\r\n**Note** : Vous pouvez ajouter des styles à votre tableau avec du **CSS** dans la prochaine leçon pour le rendre encore plus joli !', 3),
(67, 34, 'Syntaxe de base (<form>, <input>, <label>)', '## Introduction\r\n\r\nLes formulaires HTML sont utilisés pour collecter des informations auprès des utilisateurs. Ils sont essentiels pour créer des pages interactives où l\'utilisateur peut soumettre des données, comme des noms, des emails, des messages, etc.\r\n\r\nLes formulaires sont créés avec la balise **`<form>`**, et ils contiennent différents types d’**éléments de formulaire**, comme les champs de saisie (**`<input>`**), les boutons de soumission (**`<button>`**), et les étiquettes (**`<label>`**).\r\n\r\n---\r\n\r\n## La balise `<form>`\r\n\r\nLa balise **`<form>`** englobe tous les éléments de votre formulaire et permet de définir une action à effectuer lorsque le formulaire est soumis (par exemple, envoyer les données vers un serveur).\r\n\r\n### Syntaxe de base :\r\n\'\'\'\r\n<form action=\"traitement.php\" method=\"POST\">\r\n    <!-- Éléments de formulaire ici -->\r\n</form>\r\n\'\'\'\r\n\r\n- **`action`** : L\'attribut **`action`** définit l\'URL à laquelle les données du formulaire seront envoyées pour traitement.\r\n- **`method`** : L\'attribut **`method`** spécifie la méthode HTTP à utiliser pour envoyer les données du formulaire. Les deux valeurs les plus courantes sont **GET** et **POST** :\r\n    - **`GET`** : Envoie les données dans l\'URL (pas recommandé pour des données sensibles).\r\n    - **`POST`** : Envoie les données dans le corps de la requête (plus sécurisé pour des données sensibles).\r\n\r\n---\r\n\r\n## Les champs de saisie avec `<input>`\r\n\r\nLa balise **`<input>`** est utilisée pour créer un champ de saisie dans un formulaire, comme un champ de texte, une case à cocher, ou un bouton radio.\r\n\r\n### Syntaxe de base pour un champ de texte :\r\n\'\'\'\r\n<input type=\"text\" name=\"nom\" placeholder=\"Votre nom\">\r\n\'\'\'\r\n\r\n- **`type=\"text\"`** : Définit le type de champ de saisie. Ici, il s\'agit d\'un champ de texte.\r\n- **`name`** : L\'attribut **`name`** permet d\'identifier ce champ lorsque les données sont envoyées au serveur.\r\n- **`placeholder`** : Fournit un texte de remplacement qui apparaît dans le champ avant que l\'utilisateur n\'entre quoi que ce soit (c’est un texte d\'exemple).\r\n\r\nExemples de types courants pour l\'attribut **`type`** :\r\n- **`text`** : champ de texte standard.\r\n- **`email`** : champ pour l’adresse email.\r\n- **`password`** : champ pour un mot de passe.\r\n- **`checkbox`** : case à cocher.\r\n- **`radio`** : bouton radio pour un choix unique parmi plusieurs options.\r\n\r\n---\r\n\r\n## L’attribut `<label>`\r\n\r\nLa balise **`<label>`** est utilisée pour définir une étiquette pour un champ de saisie. Elle est importante pour l’accessibilité, car elle permet aux utilisateurs de cliquer sur l\'étiquette pour activer le champ de saisie.\r\n\r\n### Syntaxe de base :\r\n\'\'\'\r\n<label for=\"nom\">Nom :</label>\r\n<input type=\"text\" id=\"nom\" name=\"nom\" placeholder=\"Votre nom\">\r\n\'\'\'\r\n\r\n- **`for=\"nom\"`** : L’attribut **`for`** fait le lien entre le **label** et le **champ de saisie** (le `id` de l\'élément à lier).\r\n\r\n---\r\n\r\n## Exemple de formulaire simple\r\n\r\nVoici un exemple d\'un formulaire HTML simple qui collecte le **nom**, l\'**email**, et un **message** :\r\n\r\n\'\'\'\r\n<form action=\"traitement.php\" method=\"POST\">\r\n    <label for=\"nom\">Nom :</label>\r\n    <input type=\"text\" id=\"nom\" name=\"nom\" placeholder=\"Votre nom\" required>\r\n\r\n    <label for=\"email\">Email :</label>\r\n    <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Votre email\" required>\r\n\r\n    <label for=\"message\">Message :</label>\r\n    <textarea id=\"message\" name=\"message\" rows=\"4\" cols=\"50\" placeholder=\"Votre message\" required></textarea>\r\n\r\n    <button type=\"submit\">Envoyer</button>\r\n</form>\r\n\'\'\'\r\n\r\n- **`<textarea>`** : Utilisée pour créer un champ de texte multi-lignes (idéal pour les messages longs).\r\n- **`<button>`** : Crée un bouton pour soumettre le formulaire.\r\n\r\n---\r\n\r\n## Résumé\r\n\r\n- Les formulaires sont créés avec la balise **`<form>`**.\r\n- Utilisez **`<input>`** pour les champs de saisie simples.\r\n- **`<label>`** est utilisée pour lier des étiquettes aux champs de saisie, améliorant ainsi l’accessibilité.\r\n- Les formulaires peuvent être soumis avec le bouton **`<button>`** ou **`<input type=\"submit\">`**.\r\n\r\n---\r\n\r\n## À retenir\r\n\r\n- Utilisez la balise **`<form>`** pour englober les éléments de votre formulaire.\r\n- Les champs de saisie sont créés avec **`<input>`**, avec différents types comme **text**, **email**, **password**, etc.\r\n- **`<label>`** est utilisé pour fournir des étiquettes claires aux utilisateurs.\r\n\r\nDans la prochaine leçon, nous verrons les **différents types de champs de formulaire**, comme les boutons radio, les cases à cocher et les menus déroulants.', 1);
INSERT INTO `sae203_lesson` (`id`, `step_id`, `title`, `content`, `order_index`) VALUES
(68, 34, 'Types d\'input (texte, email, checkbox, etc.)', '## Introduction\r\n\r\nDans les formulaires HTML, l\'élément **`<input>`** est utilisé pour créer divers types de champs de saisie. Selon le type de donnée que vous souhaitez collecter, vous pouvez spécifier un **type d\'input** différent. Cela permet de personnaliser l\'apparence et le comportement du champ de saisie.\r\n\r\n---\r\n\r\n## Le type `text` : Champ de texte simple\r\n\r\nLe **type `text`** est utilisé pour créer un champ de saisie de texte simple, où l\'utilisateur peut entrer du texte librement.\r\n\r\n### Syntaxe :\r\n\'\'\'\r\n<input type=\"text\" name=\"nom\" placeholder=\"Entrez votre nom\">\r\n\'\'\'\r\n\r\n- **`type=\"text\"`** : Définit un champ de texte standard.\r\n- **`name`** : Attribut qui identifie le champ pour l’envoi des données.\r\n- **`placeholder`** : Affiche un texte de remplacement dans le champ avant que l\'utilisateur n\'entre une valeur.\r\n\r\n---\r\n\r\n## Le type `email` : Champ pour les adresses email\r\n\r\nLe **type `email`** permet de restreindre l’entrée de l’utilisateur à une **adresse email valide**. Le navigateur effectuera une validation de la syntaxe de l\'email avant que le formulaire ne soit soumis.\r\n\r\n### Syntaxe :\r\n\'\'\'\r\n<input type=\"email\" name=\"email\" placeholder=\"Entrez votre email\" required>\r\n\'\'\'\r\n\r\n- **`type=\"email\"`** : Spécifie que l\'utilisateur doit entrer une adresse email valide.\r\n- **`required`** : Assure que ce champ soit obligatoire.\r\n\r\nLe navigateur s’assurera que l’utilisateur entre une adresse email valide (avec un `@` et un domaine) avant de soumettre le formulaire.\r\n\r\n---\r\n\r\n## Le type `password` : Champ pour les mots de passe\r\n\r\nLe **type `password`** crée un champ de saisie masqué où les caractères sont affichés sous forme de points ou d\'astérisques pour garantir la confidentialité.\r\n\r\n### Syntaxe :\r\n\'\'\'\r\n<input type=\"password\" name=\"motdepasse\" placeholder=\"Entrez votre mot de passe\" required>\r\n\'\'\'\r\n\r\n- **`type=\"password\"`** : Masque les caractères saisis dans le champ.\r\n- **`required`** : Assure que ce champ soit obligatoire.\r\n\r\n---\r\n\r\n## Le type `checkbox` : Case à cocher\r\n\r\nLe **type `checkbox`** permet à l\'utilisateur de sélectionner une ou plusieurs options parmi une liste d\'options. Chaque **`<input>`** avec `type=\"checkbox\"` représente une case à cocher indépendante.\r\n\r\n### Syntaxe :\r\n\'\'\'\r\n<input type=\"checkbox\" name=\"newsletter\" value=\"oui\"> Je veux recevoir la newsletter\r\n\'\'\'\r\n\r\n- **`type=\"checkbox\"`** : Crée une case à cocher.\r\n- **`value=\"oui\"`** : Détermine la valeur envoyée lorsque la case est cochée.\r\n\r\nLes cases à cocher sont souvent utilisées pour les options binaires, comme accepter des conditions, ou choisir des préférences.\r\n\r\n---\r\n\r\n## Le type `radio` : Bouton radio\r\n\r\nLe **type `radio`** permet à l’utilisateur de faire un choix parmi plusieurs options, mais uniquement **une seule option** peut être sélectionnée à la fois.\r\n\r\n### Syntaxe :\r\n\'\'\'\r\n<input type=\"radio\" name=\"genre\" value=\"homme\"> Homme\r\n<input type=\"radio\" name=\"genre\" value=\"femme\"> Femme\r\n\'\'\'\r\n\r\n- **`type=\"radio\"`** : Crée un bouton radio.\r\n- **`name`** : Tous les boutons radio d\'un même groupe doivent avoir le même nom pour que l’utilisateur ne puisse choisir qu’une seule option.\r\n\r\n---\r\n\r\n## Le type `number` : Champ pour les nombres\r\n\r\nLe **type `number`** est utilisé pour créer un champ de saisie où l\'utilisateur peut entrer uniquement des **nombres**.\r\n\r\n### Syntaxe :\r\n\'\'\'\r\n<input type=\"number\" name=\"age\" min=\"18\" max=\"120\" step=\"1\" placeholder=\"Votre âge\">\r\n\'\'\'\r\n\r\n- **`type=\"number\"`** : Définit un champ permettant d\'entrer un nombre.\r\n- **`min`** et **`max`** : Définissent les valeurs minimales et maximales autorisées.\r\n- **`step`** : Définit l\'incrément du nombre (par exemple, 1, 0.1, etc.).\r\n\r\n---\r\n\r\n## Le type `date` : Champ pour une date\r\n\r\nLe **type `date`** permet à l\'utilisateur de saisir une date, en utilisant un sélecteur de date intégré dans les navigateurs modernes.\r\n\r\n### Syntaxe :\r\n\'\'\'\r\n<input type=\"date\" name=\"date_naissance\" required>\r\n\'\'\'\r\n\r\n- **`type=\"date\"`** : Affiche un sélecteur de date (jour/mois/année) dans les navigateurs compatibles.\r\n\r\n---\r\n\r\n## Le type `submit` : Bouton de soumission\r\n\r\nLe **type `submit`** crée un bouton qui permet de soumettre le formulaire.\r\n\r\n### Syntaxe :\r\n\'\'\'\r\n<input type=\"submit\" value=\"Envoyer\">\r\n\'\'\'\r\n\r\n- **`type=\"submit\"`** : Crée un bouton qui envoie les données du formulaire.\r\n\r\n---\r\n\r\n## Exemple de formulaire avec différents types d\'input\r\n\r\nVoici un exemple d’un formulaire complet utilisant différents types de **`input`** :\r\n\r\n\'\'\'\r\n<form action=\"traitement.php\" method=\"POST\">\r\n    <label for=\"nom\">Nom :</label>\r\n    <input type=\"text\" id=\"nom\" name=\"nom\" placeholder=\"Votre nom\" required>\r\n\r\n    <label for=\"email\">Email :</label>\r\n    <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Votre email\" required>\r\n\r\n    <label for=\"motdepasse\">Mot de passe :</label>\r\n    <input type=\"password\" id=\"motdepasse\" name=\"motdepasse\" placeholder=\"Votre mot de passe\" required>\r\n\r\n    <label for=\"newsletter\">Je souhaite recevoir la newsletter :</label>\r\n    <input type=\"checkbox\" id=\"newsletter\" name=\"newsletter\" value=\"oui\">\r\n\r\n    <label for=\"genre\">Genre :</label>\r\n    <input type=\"radio\" id=\"homme\" name=\"genre\" value=\"homme\"> Homme\r\n    <input type=\"radio\" id=\"femme\" name=\"genre\" value=\"femme\"> Femme\r\n\r\n    <label for=\"age\">Âge :</label>\r\n    <input type=\"number\" id=\"age\" name=\"age\" min=\"18\" max=\"120\" required>\r\n\r\n    <label for=\"date_naissance\">Date de naissance :</label>\r\n    <input type=\"date\" id=\"date_naissance\" name=\"date_naissance\" required>\r\n\r\n    <input type=\"submit\" value=\"Envoyer\">\r\n</form>\r\n\'\'\'\r\n\r\n---\r\n\r\n## Résumé\r\n\r\n- Utilisez **`type=\"text\"`** pour un champ de texte simple.\r\n- Utilisez **`type=\"email\"`** pour un champ d\'email avec validation.\r\n- Utilisez **`type=\"password\"`** pour un champ de mot de passe masqué.\r\n- Utilisez **`type=\"checkbox\"`** pour des cases à cocher.\r\n- Utilisez **`type=\"radio\"`** pour des boutons radio (choix unique).\r\n- Utilisez **`type=\"number\"`** pour des champs numériques.\r\n- Utilisez **`type=\"date\"`** pour un sélecteur de date.\r\n- Utilisez **`type=\"submit\"`** pour soumettre le formulaire.\r\n\r\n---\r\n\r\n## À retenir\r\n\r\n- Les types d\'**`input`** définissent la manière dont l\'utilisateur va entrer les informations dans un formulaire.\r\n- Utilisez **`<input type=\"email\">** pour valider les adresses email et **`<input type=\"password\">** pour masquer le texte des mots de passe.\r\n- Les **cases à cocher** et **boutons radio** sont utilisés pour permettre à l\'utilisateur de sélectionner des options parmi plusieurs.\r\n\r\nDans la prochaine leçon, nous explorerons d\'autres éléments de formulaire avancés, comme les **menus déroulants** et les **zones de texte**.', 2),
(69, 34, 'Boutons, textarea, envoi de formulaire (sans PHP pour l’instant)', '## Introduction\r\n\r\nDans cette leçon, nous allons explorer les éléments de formulaire comme les **boutons de soumission**, les **zones de texte multi-lignes** (**`<textarea>`**), et comment envoyer un formulaire sans utiliser PHP ou un traitement côté serveur. Vous apprendrez à créer des formulaires plus interactifs et complets.\r\n\r\n---\r\n\r\n## Les boutons de soumission (`<button>` et `<input type=\"submit\">`)\r\n\r\nLes boutons sont utilisés pour soumettre le formulaire ou effectuer une action. Il existe deux façons de créer un bouton de soumission dans un formulaire HTML.\r\n\r\n### 1. Le bouton de soumission avec **`<input>`** :\r\nL\'attribut **`type=\"submit\"`** définit un bouton qui permet de soumettre un formulaire.\r\n\r\n### Syntaxe :\r\n\'\'\'\r\n<input type=\"submit\" value=\"Envoyer\">\r\n\'\'\'\r\n\r\n- **`value`** : Définit le texte qui s\'affiche sur le bouton.\r\n\r\nExemple :\r\n\'\'\'\r\n<input type=\"submit\" value=\"Envoyer mon formulaire\">\r\n\'\'\'\r\n\r\n### 2. Le bouton de soumission avec **`<button>`** :\r\nLa balise **`<button>`** permet plus de flexibilité, car vous pouvez y insérer du texte, des images, ou même du HTML.\r\n\r\n### Syntaxe :\r\n\'\'\'\r\n<button type=\"submit\">Envoyer</button>\r\n\'\'\'\r\n\r\nLes deux options fonctionnent de manière similaire pour envoyer le formulaire, mais **`<button>`** peut être plus stylisé et comporter des éléments plus complexes à l’intérieur.\r\n\r\n---\r\n\r\n## La zone de texte multi-lignes avec `<textarea>`\r\n\r\nLa balise **`<textarea>`** permet de créer une zone de texte où l\'utilisateur peut saisir plusieurs lignes de texte. Cela est idéal pour des champs comme les **commentaires**, les **messages** ou les **descriptions longues**.\r\n\r\n### Syntaxe :\r\n\'\'\'\r\n<textarea name=\"message\" rows=\"4\" cols=\"50\" placeholder=\"Écrivez votre message ici...\"></textarea>\r\n\'\'\'\r\n\r\n- **`rows`** : Définit la hauteur de la zone de texte en nombre de lignes.\r\n- **`cols`** : Définit la largeur de la zone de texte en nombre de caractères.\r\n- **`placeholder`** : Affiche un texte d\'exemple à l\'intérieur de la zone de texte avant que l\'utilisateur ne commence à saisir.\r\n\r\nExemple :\r\n\'\'\'\r\n<textarea name=\"message\" rows=\"5\" cols=\"40\" placeholder=\"Laissez votre message ici\"></textarea>\r\n\'\'\'\r\n\r\nLa zone de texte permet à l\'utilisateur de saisir plusieurs lignes de texte, ce qui est utile pour des champs comme \"Message\" ou \"Description\".\r\n\r\n---\r\n\r\n## Envoi d’un formulaire (sans PHP)\r\n\r\nLorsque vous créez un formulaire HTML, vous devez spécifier où les données doivent être envoyées lorsque le formulaire est soumis. Cet envoi se fait grâce à l\'attribut **`action`** de la balise **`<form>`**. \r\n\r\n### Exemple avec **`action=\"#\"`** (sans PHP) :\r\nPour tester un formulaire sans traitement côté serveur, vous pouvez simplement utiliser **`#`** dans l\'attribut **`action`**. Cela permet de simuler l\'envoi du formulaire sans rediriger vers un fichier PHP.\r\n\r\n### Syntaxe :\r\n\'\'\'\r\n<form action=\"#\" method=\"POST\">\r\n    <!-- Éléments de formulaire ici -->\r\n    <input type=\"text\" name=\"nom\" placeholder=\"Votre nom\">\r\n    <textarea name=\"message\" rows=\"5\" cols=\"40\" placeholder=\"Votre message\"></textarea>\r\n    <input type=\"submit\" value=\"Envoyer\">\r\n</form>\r\n\'\'\'\r\n\r\n- **`action=\"#\"`** : Cela permet de simuler l\'envoi du formulaire sans traitement côté serveur.\r\n- **`method=\"POST\"`** : Définit que les données du formulaire seront envoyées via la méthode **`POST`**.\r\n\r\n---\r\n\r\n## Exemple complet de formulaire avec `textarea`, boutons et envoi\r\n\r\nVoici un exemple complet d’un formulaire HTML qui inclut un champ **`<textarea>`**, des **boutons de soumission**, et un envoi sans traitement côté serveur (utilisation de **`action=\"#\"`**).\r\n\r\n\'\'\'\r\n<form action=\"#\" method=\"POST\">\r\n    <label for=\"nom\">Nom :</label>\r\n    <input type=\"text\" id=\"nom\" name=\"nom\" placeholder=\"Votre nom\" required>\r\n\r\n    <label for=\"email\">Email :</label>\r\n    <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Votre email\" required>\r\n\r\n    <label for=\"message\">Message :</label>\r\n    <textarea id=\"message\" name=\"message\" rows=\"5\" cols=\"40\" placeholder=\"Votre message ici...\" required></textarea>\r\n\r\n    <button type=\"submit\">Envoyer</button>\r\n</form>\r\n\'\'\'\r\n\r\nCe formulaire enverra les données vers **`#`**, ce qui signifie qu\'il ne sera pas réellement soumis à un serveur. Vous pouvez tester le formulaire pour voir comment il se comporte, sans avoir besoin de mettre en place un backend.\r\n\r\n---\r\n\r\n## Résumé\r\n\r\n- **`<button type=\"submit\">`** et **`<input type=\"submit\">`** sont utilisés pour envoyer les données du formulaire.\r\n- **`<textarea>`** permet de créer des zones de texte multi-lignes pour des messages ou des commentaires.\r\n- **`action=\"#\"`** dans un formulaire permet de tester le formulaire sans l’envoyer à un serveur réel.\r\n\r\n---\r\n\r\n## À retenir\r\n\r\n- **Les boutons de soumission** permettent d\'envoyer un formulaire, avec **`<input>`** ou **`<button>`**.\r\n- **`<textarea>`** est utilisé pour des champs de texte multi-lignes, comme les messages ou commentaires.\r\n- L’attribut **`action=\"#\"`** permet de simuler l’envoi du formulaire sans traitement côté serveur.\r\n\r\nDans la prochaine leçon, nous explorerons l\'ajout d\'autres **éléments avancés de formulaire**, comme les menus déroulants et les champs de recherche.', 3),
(70, 34, 'Exercice – Créer un formulaire avec boutons, zone de texte, et envoi', '## Objectif de l’exercice\r\n\r\nDans cet exercice, vous allez créer un formulaire HTML comprenant un **champ de texte**, une **zone de texte multi-lignes** (textarea), et un **bouton de soumission**. Vous apprendrez également à simuler l\'envoi du formulaire sans traitement côté serveur.\r\n\r\n---\r\n\r\n## Instructions\r\n\r\n### 1. Créez un fichier `index.html`\r\n\r\nOuvrez **VSCode** et créez un fichier **`index.html`** dans le dossier de votre projet, puis ajoutez-y la structure de base d’un formulaire.\r\n\r\n### 2. Créez un champ de texte pour le nom\r\n\r\nAjoutez un champ de texte pour que l’utilisateur puisse saisir son **nom**. Utilisez l\'élément **`<input type=\"text\">** avec un **`placeholder`** pour guider l\'utilisateur.\r\n\r\nExemple de code :\r\n\'\'\'\r\n<label for=\"nom\">Nom :</label>\r\n<input type=\"text\" id=\"nom\" name=\"nom\" placeholder=\"Votre nom\" required>\r\n\'\'\'\r\n\r\n### 3. Créez un champ de texte pour l\'email\r\n\r\nAjoutez un champ de saisie pour l’**email** de l’utilisateur, en utilisant **`<input type=\"email\">** pour valider la syntaxe de l’adresse email.\r\n\r\nExemple de code :\r\n\'\'\'\r\n<label for=\"email\">Email :</label>\r\n<input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Votre email\" required>\r\n\'\'\'\r\n\r\n### 4. Créez une zone de texte multi-lignes pour le message\r\n\r\nAjoutez une **zone de texte multi-lignes** avec **`<textarea>`** où l’utilisateur pourra écrire un **message** ou une **commentaire**.\r\n\r\nExemple de code :\r\n\'\'\'\r\n<label for=\"message\">Message :</label>\r\n<textarea id=\"message\" name=\"message\" rows=\"5\" cols=\"40\" placeholder=\"Votre message ici...\" required></textarea>\r\n\'\'\'\r\n\r\n### 5. Créez un bouton de soumission\r\n\r\nAjoutez un bouton de soumission avec **`<button type=\"submit\">`** pour envoyer le formulaire.\r\n\r\nExemple de code :\r\n\'\'\'\r\n<button type=\"submit\">Envoyer</button>\r\n\'\'\'\r\n\r\n### 6. Simulez l’envoi du formulaire (sans PHP)\r\n\r\nUtilisez **`action=\"#\"`** dans l\'attribut **`action`** du formulaire pour simuler l’envoi des données sans envoyer le formulaire à un serveur.\r\n\r\nExemple de code :\r\n\'\'\'\r\n<form action=\"#\" method=\"POST\">\r\n    <!-- Ajoutez ici les champs de saisie -->\r\n    <input type=\"text\" name=\"nom\" placeholder=\"Votre nom\" required>\r\n    <input type=\"email\" name=\"email\" placeholder=\"Votre email\" required>\r\n    <textarea name=\"message\" rows=\"5\" cols=\"40\" placeholder=\"Votre message ici...\" required></textarea>\r\n    <button type=\"submit\">Envoyer</button>\r\n</form>\r\n\'\'\'\r\n\r\n### 7. Enregistrez et testez votre formulaire\r\n\r\n1. Enregistrez votre fichier **`index.html`**.\r\n2. Ouvrez-le dans un navigateur pour tester votre formulaire.\r\n3. Vérifiez :\r\n   - Le **champ de texte** pour le **nom** fonctionne correctement.\r\n   - Le **champ d\'email** valide l\'adresse email.\r\n   - La **zone de texte multi-lignes** permet de saisir plusieurs lignes de texte.\r\n   - Le **bouton de soumission** fonctionne, mais comme vous avez utilisé **`action=\"#\"`**, le formulaire ne sera pas réellement soumis.\r\n\r\n---\r\n\r\n## Résultat attendu\r\n\r\nVous devez avoir une page avec un formulaire contenant :\r\n1. Un champ **nom** de type **texte**.\r\n2. Un champ **email** de type **email**.\r\n3. Une **zone de texte** pour un **message**.\r\n4. Un **bouton de soumission** pour envoyer le formulaire.\r\n\r\n---\r\n\r\n## À retenir\r\n\r\n- Utilisez **`<input type=\"text\">`** pour un champ de texte simple et **`<input type=\"email\">`** pour un champ d\'email avec validation.\r\n- **`<textarea>`** permet de créer une zone de texte multi-lignes.\r\n- Utilisez **`<button type=\"submit\">`** ou **`<input type=\"submit\">`** pour envoyer un formulaire.\r\n\r\n---\r\n\r\n**Note** : Vous pouvez styliser ce formulaire avec du CSS pour le rendre plus joli dans la prochaine leçon !', 4),
(71, 35, 'Les balises sémantiques (<header>, <main>, etc.)', '## Introduction\r\n\r\nLe HTML sémantique fait référence à l\'utilisation de balises HTML qui ont une signification particulière et qui permettent de mieux structurer le contenu d\'une page web. Utiliser des balises sémantiques est essentiel pour rendre le code plus lisible, améliorer l’**accessibilité**, et optimiser le **référencement SEO** de votre site.\r\n\r\nLes balises sémantiques permettent de donner un **sens logique** à chaque section d’une page, ce qui est bénéfique pour les moteurs de recherche et les technologies d’assistance comme les lecteurs d’écran.\r\n\r\n---\r\n\r\n## Les balises sémantiques les plus courantes\r\n\r\n### 1. **`<header>`** : L\'entête de la page\r\n\r\nLa balise **`<header>`** est utilisée pour regrouper les informations d’entête de la page. Elle contient généralement le titre de la page, le logo, la navigation, et d’autres éléments introductifs.\r\n\r\n### Exemple :\r\n\'\'\'\r\n<header>\r\n    <h1>Bienvenue sur mon site web</h1>\r\n    <nav>\r\n        <ul>\r\n            <li><a href=\"#accueil\">Accueil</a></li>\r\n            <li><a href=\"#services\">Services</a></li>\r\n            <li><a href=\"#contact\">Contact</a></li>\r\n        </ul>\r\n    </nav>\r\n</header>\r\n\'\'\'\r\n\r\n- **`<header>`** est généralement placé en haut de la page ou de chaque section importante.\r\n- Il peut contenir un logo, des titres, et des éléments de navigation comme des menus.\r\n\r\n---\r\n\r\n### 2. **`<main>`** : Le contenu principal\r\n\r\nLa balise **`<main>`** définit le **contenu principal** d’une page. Tout le contenu qui est unique à la page et qui est directement lié à l’objet de la page doit être contenu dans la balise **`<main>`**.\r\n\r\n### Exemple :\r\n\'\'\'\r\n<main>\r\n    <section>\r\n        <h2>Nos services</h2>\r\n        <p>Nous proposons une large gamme de services...</p>\r\n    </section>\r\n    <section>\r\n        <h2>Notre équipe</h2>\r\n        <p>Voici les membres de notre équipe...</p>\r\n    </section>\r\n</main>\r\n\'\'\'\r\n\r\n- **`<main>`** ne doit apparaître qu\'une seule fois sur une page. Il ne doit pas être utilisé pour les éléments répétitifs comme les menus ou les footers.\r\n\r\n---\r\n\r\n### 3. **`<footer>`** : Le pied de page\r\n\r\nLa balise **`<footer>`** est utilisée pour regrouper les informations de pied de page, comme les crédits, les informations de contact, ou les liens vers la politique de confidentialité.\r\n\r\n### Exemple :\r\n\'\'\'\r\n<footer>\r\n    <p>&copy; 2023 Mon Site Web</p>\r\n    <nav>\r\n        <ul>\r\n            <li><a href=\"#mentions-legales\">Mentions légales</a></li>\r\n            <li><a href=\"#politique-de-confidentialite\">Politique de confidentialité</a></li>\r\n        </ul>\r\n    </nav>\r\n</footer>\r\n\'\'\'\r\n\r\n- **`<footer>`** apparaît généralement en bas de la page.\r\n- Il peut contenir des informations légales, des liens vers d’autres pages, ou des informations de copyright.\r\n\r\n---\r\n\r\n### 4. **`<section>`** : Une section distincte de contenu\r\n\r\nLa balise **`<section>`** est utilisée pour définir une section distincte d’un document. Chaque **`<section>`** peut contenir un titre, des paragraphes, des images, etc. C’est une manière de diviser le contenu en différentes parties logiques.\r\n\r\n### Exemple :\r\n\'\'\'\r\n<section>\r\n    <h2>À propos de nous</h2>\r\n    <p>Nous sommes une entreprise qui...</p>\r\n</section>\r\n\'\'\'\r\n\r\n- Chaque **`<section>`** est une unité logique du contenu de la page. Elle peut être utilisée pour organiser les articles, les services, les témoignages, etc.\r\n\r\n---\r\n\r\n### 5. **`<article>`** : Un article indépendant\r\n\r\nLa balise **`<article>`** est utilisée pour définir un contenu indépendant, qui peut être redistribué ou réutilisé, comme un article de blog, une news, ou une critique.\r\n\r\n### Exemple :\r\n\'\'\'\r\n<article>\r\n    <h2>Mon dernier voyage à Paris</h2>\r\n    <p>Voici l’histoire de mon voyage...</p>\r\n</article>\r\n\'\'\'\r\n\r\n- Un **`<article>`** doit contenir un contenu qui a du sens de manière indépendante.\r\n- Il peut être réutilisé ou affiché séparément du reste de la page.\r\n\r\n---\r\n\r\n### 6. **`<aside>`** : Contenu secondaire\r\n\r\nLa balise **`<aside>`** est utilisée pour contenir du contenu secondaire qui est lié au contenu principal, mais qui pourrait être mis de côté, comme une **barre latérale**, des **liens connexes**, ou des **annonces**.\r\n\r\n### Exemple :\r\n\'\'\'\r\n<aside>\r\n    <h3>Liens utiles</h3>\r\n    <ul>\r\n        <li><a href=\"#blog\">Blog</a></li>\r\n        <li><a href=\"#contact\">Contact</a></li>\r\n    </ul>\r\n</aside>\r\n\'\'\'\r\n\r\n- **`<aside>`** est souvent utilisé pour du contenu complémentaire, qui peut être ignoré sans affecter la compréhension du contenu principal.\r\n\r\n---\r\n\r\n## Résumé\r\n\r\nLes balises **sémantiques** permettent de structurer une page de manière logique et compréhensible. Voici les balises principales :\r\n- **`<header>`** : En-tête de la page.\r\n- **`<main>`** : Contenu principal de la page.\r\n- **`<footer>`** : Pied de page avec des informations légales et des liens.\r\n- **`<section>`** : Sections de contenu distinctes.\r\n- **`<article>`** : Contenu autonome, comme un article ou un billet de blog.\r\n- **`<aside>`** : Contenu secondaire lié au principal (barres latérales, liens supplémentaires).\r\n\r\n---\r\n\r\n## À retenir\r\n\r\n- Utilisez les balises sémantiques pour organiser votre contenu de manière logique et accessible.\r\n- Cela améliore l’**accessibilité** et le **référencement SEO**.\r\n- Privilégiez les balises sémantiques lorsque c\'est possible pour une meilleure lisibilité et structure de votre code HTML.\r\n\r\nDans la prochaine leçon, nous allons voir comment utiliser ces balises dans un projet concret pour mieux structurer une page complète.', 1),
(72, 35, 'Pourquoi la sémantique est importante (accessibilité, SEO)', '## Introduction\r\n\r\nDans cette leçon, nous allons expliquer pourquoi l\'utilisation de balises **HTML sémantiques** est cruciale pour améliorer **l\'accessibilité** et le **référencement SEO** de votre site web. En utilisant des balises qui ont une signification claire et explicite, vous permettez non seulement aux moteurs de recherche de mieux comprendre le contenu de votre page, mais vous améliorez également l’expérience des utilisateurs, en particulier ceux utilisant des technologies d’assistance.\r\n\r\n---\r\n\r\n## L\'importance pour l\'accessibilité\r\n\r\nL\'**accessibilité** est essentielle pour garantir que tous les utilisateurs, y compris ceux ayant des **handicaps**, puissent accéder à votre contenu web de manière facile et fluide. Les **technologies d’assistance** telles que les **lecteurs d\'écran** dépendent des balises sémantiques pour lire et interpréter correctement le contenu de la page.\r\n\r\n### Pourquoi la sémantique améliore l\'accessibilité :\r\n\r\n1. **Identification claire des sections du contenu** : Les balises comme **`<header>`**, **`<main>`**, **`<footer>`**, et **`<section>`** aident les utilisateurs à comprendre rapidement la structure du contenu. Les lecteurs d’écran peuvent utiliser ces balises pour naviguer plus facilement entre les différentes sections de la page.\r\n   \r\n2. **Descriptions précises pour les éléments** : Les balises **`<article>`** et **`<aside>`** indiquent des sections spécifiques du contenu, ce qui permet à un lecteur d’écran de déterminer rapidement quelle partie du site il examine (par exemple, un article de blog ou une barre latérale).\r\n\r\n3. **Meilleure navigation pour les utilisateurs de claviers** : Les balises sémantiques rendent la navigation plus intuitive pour les utilisateurs qui n\'utilisent pas de souris. Par exemple, un utilisateur de clavier peut facilement naviguer entre le contenu principal et les sections latérales grâce aux balises sémantiques.\r\n\r\n---\r\n\r\n## L\'importance pour le référencement (SEO)\r\n\r\nLes moteurs de recherche, comme **Google**, utilisent des robots d\'indexation pour analyser les pages web et comprendre leur contenu. Une page bien structurée avec des balises sémantiques est **plus facile à analyser**, ce qui peut améliorer son classement dans les résultats de recherche.\r\n\r\n### Pourquoi la sémantique améliore le SEO :\r\n\r\n1. **Compréhension claire du contenu** : Les balises sémantiques aident les moteurs de recherche à **comprendre** la structure de la page et son contenu. Par exemple, un **`<article>`** est identifié comme un article indépendant, ce qui permet au moteur de recherche de l’indexer correctement.\r\n   \r\n2. **Optimisation des mots-clés** : Lorsque les balises sémantiques sont utilisées correctement, elles aident à mieux **organiser le contenu** et à faire ressortir les mots-clés importants pour le référencement. Par exemple, un **`<header>`** contient souvent le titre principal du site ou de la page, ce qui est crucial pour le SEO.\r\n\r\n3. **Amélioration de l’expérience utilisateur** : Un contenu bien structuré avec des balises sémantiques est plus facile à naviguer pour les utilisateurs. Cela peut réduire le taux de rebond et améliorer l\'expérience globale, des facteurs qui influencent également le SEO.\r\n\r\n---\r\n\r\n## Exemple : Comparaison entre HTML sémantique et non-sémantique\r\n\r\n### HTML non-sémantique :\r\nVoici un exemple d’une structure de page **non-sémantique** :\r\n\r\n\'\'\'\r\n<div>\r\n    <h1>Bienvenue sur notre site</h1>\r\n    <div>\r\n        <h2>À propos</h2>\r\n        <p>Notre entreprise...</p>\r\n    </div>\r\n    <div>\r\n        <h2>Nos services</h2>\r\n        <p>Nous proposons...</p>\r\n    </div>\r\n</div>\r\n\'\'\'\r\n\r\nCe code manque de balises sémantiques comme **`<header>`**, **`<section>`**, et **`<article>`**. Cela rend le contenu moins accessible pour les lecteurs d\'écran et plus difficile à interpréter pour les moteurs de recherche.\r\n\r\n### HTML sémantique :\r\nVoici une version améliorée avec des **balises sémantiques** :\r\n\r\n\'\'\'\r\n<header>\r\n    <h1>Bienvenue sur notre site</h1>\r\n</header>\r\n<main>\r\n    <section>\r\n        <h2>À propos</h2>\r\n        <p>Notre entreprise...</p>\r\n    </section>\r\n    <section>\r\n        <h2>Nos services</h2>\r\n        <p>Nous proposons...</p>\r\n    </section>\r\n</main>\r\n<footer>\r\n    <p>&copy; 2023 Mon entreprise</p>\r\n</footer>\r\n\'\'\'\r\n\r\nDans cet exemple, l’utilisation des balises **`<header>`**, **`<main>`**, **`<section>`**, et **`<footer>`** permet aux lecteurs d\'écran et aux moteurs de recherche de mieux comprendre la structure du contenu et son organisation.\r\n\r\n---\r\n\r\n## Résumé\r\n\r\nL\'utilisation de balises sémantiques présente plusieurs avantages :\r\n- **Amélioration de l\'accessibilité** : Facilite la navigation pour les utilisateurs de technologies d’assistance, comme les lecteurs d\'écran.\r\n- **Optimisation du référencement (SEO)** : Aide les moteurs de recherche à comprendre la structure de la page et à mieux indexer le contenu.\r\n- **Amélioration de l\'expérience utilisateur** : Un contenu bien structuré est plus facile à naviguer, ce qui peut améliorer l\'engagement des utilisateurs et le classement SEO.\r\n\r\n---\r\n\r\n## À retenir\r\n\r\n- Utilisez des balises sémantiques pour structurer votre contenu de manière logique et accessible.\r\n- Les balises comme **`<header>`**, **`<main>`**, **`<footer>`**, et **`<section>`** rendent votre page plus accessible et améliorent son référencement.\r\n- Le HTML sémantique est crucial pour une meilleure **accessibilité** et un meilleur **SEO**.\r\n\r\nDans la prochaine leçon, nous allons mettre en pratique tout ce que vous avez appris sur le **HTML sémantique** pour structurer une page web complète !\r\n\r\n', 2),
(73, 35, 'Exercice – Structurer une page avec des balises sémantiques', '## Objectif de l’exercice\r\n\r\nDans cet exercice, vous allez structurer une page web en utilisant des **balises HTML sémantiques**. Vous utiliserez des balises comme **`<header>`**, **`<main>`**, **`<section>`**, **`<article>`**, et **`<footer>`** pour organiser le contenu de manière logique et accessible.\r\n\r\n---\r\n\r\n## Instructions\r\n\r\n### 1. Créez un fichier `index.html`\r\n\r\nOuvrez **VSCode** et créez un fichier **`index.html`** dans le dossier de votre projet. Ajoutez-y la structure de base HTML.\r\n\r\n### 2. Ajoutez une section d’entête avec `<header>`\r\n\r\nDans la section **`<header>`**, ajoutez un **titre principal** de la page avec un **`<h1>`**, et un menu de navigation avec des **liens** vers différentes sections de la page.\r\n\r\nExemple de code :\r\n\'\'\'\r\n<header>\r\n    <h1>Mon Site Web</h1>\r\n    <nav>\r\n        <ul>\r\n            <li><a href=\"#accueil\">Accueil</a></li>\r\n            <li><a href=\"#services\">Services</a></li>\r\n            <li><a href=\"#contact\">Contact</a></li>\r\n        </ul>\r\n    </nav>\r\n</header>\r\n\'\'\'\r\n\r\n### 3. Créez une section principale avec `<main>`\r\n\r\nDans la section **`<main>`**, ajoutez deux **sections** distinctes avec la balise **`<section>`**. Chaque section doit avoir un titre (**`<h2>`**) et un petit paragraphe de texte.\r\n\r\nExemple de code :\r\n\'\'\'\r\n<main>\r\n    <section id=\"services\">\r\n        <h2>Nos Services</h2>\r\n        <p>Nous offrons une gamme de services professionnels...</p>\r\n    </section>\r\n    <section id=\"contact\">\r\n        <h2>Contactez-nous</h2>\r\n        <p>Pour toute question, vous pouvez nous contacter à...</p>\r\n    </section>\r\n</main>\r\n\'\'\'\r\n\r\n### 4. Ajoutez une section d\'articles avec `<article>`\r\n\r\nAjoutez une section **`<article>`** dans le **`<main>`** pour un contenu autonome, comme un **article de blog** ou une **news**.\r\n\r\nExemple de code :\r\n\'\'\'\r\n<article>\r\n    <h2>Les dernières actualités</h2>\r\n    <p>Découvrez les nouvelles fonctionnalités de notre site...</p>\r\n</article>\r\n\'\'\'\r\n\r\n### 5. Créez un pied de page avec `<footer>`\r\n\r\nDans la section **`<footer>`**, ajoutez des informations de **copyright** et quelques liens vers les **mentions légales** ou **politique de confidentialité**.\r\n\r\nExemple de code :\r\n\'\'\'\r\n<footer>\r\n    <p>&copy; 2023 Mon Site Web. Tous droits réservés.</p>\r\n    <nav>\r\n        <ul>\r\n            <li><a href=\"#mentions-legales\">Mentions légales</a></li>\r\n            <li><a href=\"#confidentialite\">Politique de confidentialité</a></li>\r\n        </ul>\r\n    </nav>\r\n</footer>\r\n\'\'\'\r\n\r\n### 6. Enregistrez et testez votre page\r\n\r\n1. Enregistrez votre fichier **`index.html`**.\r\n2. Ouvrez-le dans un navigateur pour tester la structure.\r\n3. Vérifiez :\r\n   - Le contenu est correctement organisé avec des **balises sémantiques** (**`<header>`**, **`<main>`**, **`<section>`**, **`<article>`**, et **`<footer>`**).\r\n   - Les liens dans le menu de navigation et dans le pied de page fonctionnent comme prévu.\r\n\r\n---\r\n\r\n## Résultat attendu\r\n\r\nVous devez avoir une page structurée avec :\r\n1. Un **`<header>`** contenant le titre du site et un menu de navigation.\r\n2. Un **`<main>`** avec des **sections** distinctes pour les services et les contacts.\r\n3. Un **`<article>`** pour une actualité ou un contenu autonome.\r\n4. Un **`<footer>`** avec des informations légales et des liens.\r\n\r\n---\r\n\r\n## À retenir\r\n\r\n- **`<header>`** est utilisé pour le titre et la navigation de la page.\r\n- **`<main>`** contient le contenu principal du site.\r\n- **`<section>`** divise le contenu en différentes parties.\r\n- **`<article>`** est utilisé pour des contenus indépendants comme des articles ou des billets de blog.\r\n- **`<footer>`** est utilisé pour des informations de bas de page comme les droits d\'auteur et les liens légaux.\r\n\r\n---\r\n\r\n**Note** : Vous pouvez ajouter des **styles CSS** pour rendre la page encore plus jolie dans la prochaine leçon !\r\n\r\n', 3);

-- --------------------------------------------------------

--
-- Structure de la table `sae203_step`
--

CREATE TABLE `sae203_step` (
  `id` int(11) NOT NULL,
  `course_id` int(11) NOT NULL,
  `title` varchar(255) NOT NULL,
  `order_index` int(11) NOT NULL,
  `xp_reward` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Déchargement des données de la table `sae203_step`
--

INSERT INTO `sae203_step` (`id`, `course_id`, `title`, `order_index`, `xp_reward`) VALUES
(10, 11, 'Tyler, the Creator', 1, 444),
(11, 11, 'Frank Ocean', 2, 222),
(17, 16, 'Comprendre le fonctionnement du Web', 1, 100),
(18, 16, 'S’équiper comme développeur web', 2, 100),
(31, 29, 'Structure d’une page HTML', 1, 100),
(32, 29, 'Contenu textuel et médias', 2, 100),
(33, 29, 'Listes et tableaux', 3, 100),
(34, 29, 'Formulaires', 4, 100),
(35, 29, 'HTML sémantique', 5, 100);

-- --------------------------------------------------------

--
-- Structure de la table `sae203_user`
--

CREATE TABLE `sae203_user` (
  `id` int(11) NOT NULL,
  `prenom` varchar(255) NOT NULL,
  `nom` varchar(255) NOT NULL,
  `email` varchar(255) NOT NULL,
  `password` varchar(255) NOT NULL,
  `xp` int(11) NOT NULL,
  `validated` tinyint(1) NOT NULL,
  `created_at` datetime DEFAULT NULL,
  `age` int(11) NOT NULL,
  `statut` varchar(255) NOT NULL,
  `pfp` varchar(255) NOT NULL,
  `bio` varchar(510) NOT NULL,
  `admin` tinyint(1) DEFAULT NULL,
  `banner` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Déchargement des données de la table `sae203_user`
--

INSERT INTO `sae203_user` (`id`, `prenom`, `nom`, `email`, `password`, `xp`, `validated`, `created_at`, `age`, `statut`, `pfp`, `bio`, `admin`, `banner`) VALUES
(13, 'Lélio', 'Chotin', 'leliochotin@gmail.com', '$2y$10$eEHLTE4ku8aiC47jrJlMHeu11XzoHobxknMaUexSw3196u9m7tUfy', 744, 0, '2025-04-30 01:45:26', 18, 'S2C2', '681cff10948ec.jpg', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum fringilla purus eget laoreet aliquam. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Donec pellentesque tincidunt nisl. Donec turpis purus, convallis nec tempus vitae, feugiat posuere risus. Aenean ultricies mi vel orci convallis imperdiet. ', 1, '681cffbf8115f.jpg'),
(15, 'Chef', 'Chef', 'chef@chef.chef', '$2y$10$mfukL2VfKa2Cfzt07HV56esD7wH5H.7sFuW/dYYsvPOe1MhdZo8Yq', 0, 0, '2025-04-30 01:48:06', 99, 'Indéfini', 'basic.jpg', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum fringilla purus eget laoreet aliquam. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Donec pellentesque tincidunt nisl. Donec turpis purus, convallis nec tempus vitae, feugiat posuere risus. Aenean ultricies mi vel orci convallis imperdiet. ', 1, 'basic.jpg'),
(25, 'John', 'Doe', 'johndoe@mail.me', '$2y$10$4OdeuBTVizaS.RfCHMIbbuMdmEKECSCz2NqA/umZnKZbAXvyFWJwi', 0, 0, '2025-05-07 16:50:25', 99, 'Etudiant', 'basic.jpg', 'Lorem Ipsum', NULL, 'basic.jpg'),
(27, 'Julian ', 'Melchior', 'julianmelchior52@gmail.com', '$2y$10$tJSBYrubaBcezRtQ5bVfhuiDcA5d4VpDStNHyFaLaRU1oxHY4Trea', 0, 0, '2025-05-08 21:19:21', 99, 'Etudiant', 'basic.jpg', 'Lorem Ipsum', NULL, 'basic.jpg'),
(28, 'Vava', 'P', 'vavaaaa@vanessa.com', '$2y$10$Anuo/LljRssAobDoUTIy9.pysbUmCybu/9OlHheSrH0QPr/ztaUqq', 0, 0, '2025-05-08 21:51:00', 99, 'Etudiant', 'basic.jpg', 'Lorem Ipsum', NULL, 'basic.jpg'),
(29, 'marion', 'descamps', 'marion.descamps07@gmail.com', '$2y$10$SRhuwt6Evd8/W1mjVnFE7eNGNNXF9RIdJTlKW.ifLscQ5dpZzhZDO', 1266, 0, '2025-05-08 22:02:38', 99, 'Etudiant', '681d0e172cdb0.jpg', 'Lorem Ipsum', NULL, '681d0e1a192d7.jpg');

-- --------------------------------------------------------

--
-- Structure de la table `sae203_user_step_xp`
--

CREATE TABLE `sae203_user_step_xp` (
  `id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `step_id` int(11) NOT NULL,
  `xp_reward` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Déchargement des données de la table `sae203_user_step_xp`
--

INSERT INTO `sae203_user_step_xp` (`id`, `user_id`, `step_id`, `xp_reward`) VALUES
(1, 13, 17, 100),
(2, 13, 18, 100),
(3, 13, 10, 444),
(4, 29, 17, 100),
(5, 29, 18, 100),
(6, 29, 31, 100),
(7, 29, 32, 100),
(8, 29, 33, 100),
(9, 29, 34, 100),
(10, 29, 10, 444),
(11, 29, 11, 222);

-- --------------------------------------------------------

--
-- Structure de la table `sae203_user_validated_lessons`
--

CREATE TABLE `sae203_user_validated_lessons` (
  `user_id` int(11) NOT NULL,
  `lesson_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Déchargement des données de la table `sae203_user_validated_lessons`
--

INSERT INTO `sae203_user_validated_lessons` (`user_id`, `lesson_id`) VALUES
(13, 22),
(13, 23),
(13, 24),
(13, 25),
(13, 40),
(13, 41),
(13, 42),
(13, 43),
(13, 44),
(13, 45),
(13, 46),
(13, 47),
(13, 57),
(13, 58),
(29, 22),
(29, 23),
(29, 24),
(29, 25),
(29, 26),
(29, 40),
(29, 41),
(29, 42),
(29, 43),
(29, 44),
(29, 45),
(29, 46),
(29, 47),
(29, 57),
(29, 58),
(29, 59),
(29, 60),
(29, 61),
(29, 62),
(29, 63),
(29, 64),
(29, 65),
(29, 66),
(29, 67),
(29, 68),
(29, 69),
(29, 70),
(29, 71),
(29, 72);

--
-- Index pour les tables déchargées
--

--
-- Index pour la table `sae203_challenge`
--
ALTER TABLE `sae203_challenge`
  ADD PRIMARY KEY (`id`),
  ADD KEY `step_id` (`step_id`);

--
-- Index pour la table `sae203_course`
--
ALTER TABLE `sae203_course`
  ADD PRIMARY KEY (`id`);

--
-- Index pour la table `sae203_defi`
--
ALTER TABLE `sae203_defi`
  ADD PRIMARY KEY (`id`);

--
-- Index pour la table `sae203_lesson`
--
ALTER TABLE `sae203_lesson`
  ADD PRIMARY KEY (`id`),
  ADD KEY `step_id` (`step_id`);

--
-- Index pour la table `sae203_step`
--
ALTER TABLE `sae203_step`
  ADD PRIMARY KEY (`id`),
  ADD KEY `course_id` (`course_id`);

--
-- Index pour la table `sae203_user`
--
ALTER TABLE `sae203_user`
  ADD PRIMARY KEY (`id`);

--
-- Index pour la table `sae203_user_step_xp`
--
ALTER TABLE `sae203_user_step_xp`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `user_id` (`user_id`,`step_id`),
  ADD KEY `step_id` (`step_id`);

--
-- Index pour la table `sae203_user_validated_lessons`
--
ALTER TABLE `sae203_user_validated_lessons`
  ADD PRIMARY KEY (`user_id`,`lesson_id`),
  ADD KEY `lesson_id` (`lesson_id`);

--
-- AUTO_INCREMENT pour les tables déchargées
--

--
-- AUTO_INCREMENT pour la table `sae203_challenge`
--
ALTER TABLE `sae203_challenge`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT pour la table `sae203_course`
--
ALTER TABLE `sae203_course`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=30;

--
-- AUTO_INCREMENT pour la table `sae203_defi`
--
ALTER TABLE `sae203_defi`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT pour la table `sae203_lesson`
--
ALTER TABLE `sae203_lesson`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=74;

--
-- AUTO_INCREMENT pour la table `sae203_step`
--
ALTER TABLE `sae203_step`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=36;

--
-- AUTO_INCREMENT pour la table `sae203_user`
--
ALTER TABLE `sae203_user`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=30;

--
-- AUTO_INCREMENT pour la table `sae203_user_step_xp`
--
ALTER TABLE `sae203_user_step_xp`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=12;

--
-- Contraintes pour les tables déchargées
--

--
-- Contraintes pour la table `sae203_challenge`
--
ALTER TABLE `sae203_challenge`
  ADD CONSTRAINT `sae203_challenge_ibfk_1` FOREIGN KEY (`step_id`) REFERENCES `sae203_step` (`id`);

--
-- Contraintes pour la table `sae203_lesson`
--
ALTER TABLE `sae203_lesson`
  ADD CONSTRAINT `step_id` FOREIGN KEY (`step_id`) REFERENCES `sae203_step` (`id`);

--
-- Contraintes pour la table `sae203_step`
--
ALTER TABLE `sae203_step`
  ADD CONSTRAINT `course_id` FOREIGN KEY (`course_id`) REFERENCES `sae203_course` (`id`);

--
-- Contraintes pour la table `sae203_user_step_xp`
--
ALTER TABLE `sae203_user_step_xp`
  ADD CONSTRAINT `sae203_user_step_xp_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `sae203_user` (`id`),
  ADD CONSTRAINT `sae203_user_step_xp_ibfk_2` FOREIGN KEY (`step_id`) REFERENCES `sae203_step` (`id`);

--
-- Contraintes pour la table `sae203_user_validated_lessons`
--
ALTER TABLE `sae203_user_validated_lessons`
  ADD CONSTRAINT `sae203_user_validated_lessons_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `sae203_user` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `sae203_user_validated_lessons_ibfk_2` FOREIGN KEY (`lesson_id`) REFERENCES `sae203_lesson` (`id`) ON DELETE CASCADE;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
